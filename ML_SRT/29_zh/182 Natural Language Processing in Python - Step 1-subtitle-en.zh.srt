1
00:00:00,300 --> 00:00:06,540
您好，欢迎使用此Python教程，并且主要欢迎使用第7部分自然语言处理。

2
00:00:06,570 --> 00:00:08,860
那么自然语言处理到底是怎么回事。

3
00:00:09,030 --> 00:00:11,440
好吧，这是关于分析文本的。

4
00:00:11,440 --> 00:00:18,870
这些文字可以是书本评论，也可以是您从哭泣中提取的一些HLL网页的摘要，

5
00:00:18,870 --> 00:00:24,930
文本，因此自然语言处理是机器学习的一个分支，我们在此进行一些预测

6
00:00:24,930 --> 00:00:27,460
对文本的分析最多。

7
00:00:27,750 --> 00:00:33,570
因此，在这一部分中，这些文本将成为您对饭店的书面评论的评论。

8
00:00:33,720 --> 00:00:39,530
因此，我们将建立一些机械模型来预测审查是正面还是负面。

9
00:00:39,540 --> 00:00:44,600
因此，这是自然语言处理应用程序的一个简单示例。

10
00:00:44,730 --> 00:00:50,100
但是该算法将使这一部分非常适用于您知道的其他类型的文本

11
00:00:50,100 --> 00:00:55,050
您可以将其应用于书籍，例如预测书籍的类型，知道是否

12
00:00:55,050 --> 00:00:58,670
这本书是一部惊悚片，一部喜剧或一部浪漫小说。

13
00:00:58,710 --> 00:01:04,680
您还可以在HGL网页上使用它来进行任何您想对此进行的分析

14
00:01:04,680 --> 00:01:05,490
页面。

15
00:01:05,580 --> 00:01:11,060
您也可以在您知道的报纸上播放它，以预测文章所属的类别。

16
00:01:11,220 --> 00:01:16,970
好吧，您将看到这将构成一个通用模型，您将可以将其应用于大多数攻击。

17
00:01:17,130 --> 00:01:21,510
当然，如果您需要将此内容应用于更复杂的文本，则可以在

18
00:01:21,510 --> 00:01:27,190
问答，我将告诉您要添加哪些内容，以使此代码可以正确处理您的文本问题。

19
00:01:27,390 --> 00:01:27,930
好。

20
00:01:28,230 --> 00:01:33,870
因此，让我们开始吧，让我们开始我们的算法，如果我们从第一个代码部分开始，让我们

21
00:01:33,870 --> 00:01:38,950
执行基本步骤所需的步骤是将正确的父亲设置为工作目录。

22
00:01:38,950 --> 00:01:42,600
所以现在我要将文件浏览器机械文件夹。

23
00:01:42,720 --> 00:01:44,310
现在我们进入第7部分。

24
00:01:44,520 --> 00:01:48,020
因此，恭喜您，本课程取得了很大进展。

25
00:01:48,070 --> 00:01:54,630
因此，自然语言处理的一部分，现在我们需要继续本节36自然语言

26
00:01:54,630 --> 00:01:59,270
处理，这就是我们的算法和数据集所在的位置。

27
00:01:59,450 --> 00:02:04,080
那是步枪，让我们单击此处的小按钮以设置文件夹的工作目录。

28
00:02:04,110 --> 00:02:07,570
现在让我们开始导入日期。

29
00:02:07,590 --> 00:02:11,480
因此，在导入数据集之前，我想向您展示一些东西。

30
00:02:11,580 --> 00:02:19,920
这是关于这两个文件的信息，您可以注意到我们有一家餐厅评论说您提交了

31
00:02:20,280 --> 00:02:23,800
一家餐厅在我们归档时评论该茶。

32
00:02:24,120 --> 00:02:30,080
因此，让我们进入计算机上的文件夹，看看有什么不同。

33
00:02:30,240 --> 00:02:35,130
我正在向您展示这些差异，以了解我们必须选择哪种差异，以便您自己

34
00:02:35,190 --> 00:02:36,660
准备一个文本文件。

35
00:02:36,660 --> 00:02:40,960
当您对问题应用自然语言处理时，这是您知道的最好方法。

36
00:02:40,980 --> 00:02:43,900
因此，现在我要进入我的文件夹。

37
00:02:44,040 --> 00:02:50,110
然后，在打开文本编辑时，打开您看到的两个恢复区。

38
00:02:50,190 --> 00:02:54,040
在这里，餐厅点评点TSB。

39
00:02:54,300 --> 00:02:58,480
同样，开头带有文本。

40
00:02:58,650 --> 00:03:05,100
这就是CSC，这就是我们要了解的CSB，因为TSB是第一行

41
00:03:05,100 --> 00:03:12,330
这是我们在Spyder中将要拥有的将来的列的标题，第一列是Review和

42
00:03:12,330 --> 00:03:19,050
第二列是浅色，我可以看到，因为这两个术语之间用逗号隔开

43
00:03:19,440 --> 00:03:24,980
就像我们跌倒的那样，它是C，这意味着所有列都用逗号分隔。

44
00:03:25,050 --> 00:03:28,170
这是包含各列标题的第一行。

45
00:03:28,320 --> 00:03:31,740
然后我们有了所有观察结果。

46
00:03:31,740 --> 00:03:34,690
因此，一条线对应一个观察值。

47
00:03:35,040 --> 00:03:39,380
如您所见，我们首先进行了审查。

48
00:03:39,420 --> 00:03:42,140
因此，这当然是一家餐厅的评论。

49
00:03:42,210 --> 00:03:43,210
哇

50
00:03:43,230 --> 00:03:48,810
喜欢这个地方，当然意味着评论是积极的，因此在第二栏中

51
00:03:48,810 --> 00:03:54,610
喜欢的专栏我们这里有一个意思是评论的确是积极的。

52
00:03:54,750 --> 00:03:56,280
所以这个变量。

53
00:03:56,270 --> 00:04:03,180
就像该列可以采用两个值1或0，而1表示它是正面评价，0表示该值

54
00:04:03,180 --> 00:04:04,880
这是一个负面评论。

55
00:04:04,890 --> 00:04:08,860
因此，正如您在第二次评论中看到的那样，外壳确实不好。

56
00:04:09,000 --> 00:04:13,080
当然，这是一个负面评论，因此这里为零。

57
00:04:13,080 --> 00:04:19,050
好的，那实际上是我们习惯的那种文件，因为自从本课程开始以来

58
00:04:19,050 --> 00:04:24,810
我们只用了一些see，因为我们跌落在用逗号分隔列的位置。

59
00:04:25,200 --> 00:04:28,160
但是这里我们有一些不同。

60
00:04:28,290 --> 00:04:30,600
我们可以看到我们有相同的列。

61
00:04:30,610 --> 00:04:32,990
第一列是启示，第二列是启示。

62
00:04:33,060 --> 00:04:39,210
而且我们有相同的评论，所以这些是具有相同数据的完全相同的数据集，但是

63
00:04:39,300 --> 00:04:40,520
一个主要区别。

64
00:04:40,560 --> 00:04:44,120
正如您可能已经猜到的，这种区别是分隔符。

65
00:04:44,400 --> 00:04:46,770
这个秋天的定界符是逗号。

66
00:04:46,830 --> 00:04:49,230
这就是分隔两列的定界符。

67
00:04:49,290 --> 00:04:57,240
在此文件中，定界符是一个制表符，这就是为什么我们将其称为T为V抽头分隔值vs C为

68
00:04:57,240 --> 00:04:59,580
我们得出了单独的值。

69
00:05:00,110 --> 00:05:07,320
因此，现在根据您的情况，我们应该为我们的未来算法选择哪种方法，

70
00:05:07,560 --> 00:05:10,770
一种机器学习算法，在这里分析所有评论。

71
00:05:11,010 --> 00:05:16,340
然后，该算法的目标将是预测评论是正面还是负面。

72
00:05:16,350 --> 00:05:16,790
好吧。

73
00:05:16,860 --> 00:05:22,880
但是现在的问题是，我们是否需要一个数据集，其中各列之间用逗号或制表符分隔。

74
00:05:23,070 --> 00:05:26,770
那么答案就是您可能通过选项卡猜到的。

75
00:05:26,940 --> 00:05:27,970
为什么是这样。

76
00:05:28,060 --> 00:05:31,910
这是因为我们在评论本身中已经有一些调用者。

77
00:05:32,190 --> 00:05:36,780
好吧，例如这篇评论是美食角。

78
00:05:37,020 --> 00:05:37,930
惊人。

79
00:05:38,250 --> 00:05:42,300
因此，如果我们在定界符是逗号的地方使用A C的话。

80
00:05:42,510 --> 00:05:48,540
好吧，我们这里的审查会有问题，因为对于这一特殊观察，第一列

81
00:05:48,540 --> 00:05:50,490
将在这里包含食物。

82
00:05:50,550 --> 00:05:57,990
因此，Python会认为这是对食品的评论，而第二次来这里不是美食，而是令人惊奇的，因为

83
00:05:57,990 --> 00:06:03,090
这里有分隔符，因此它将分隔食物和

84
00:06:03,150 --> 00:06:09,660
令人惊讶的，因此将要发生的事情将进入下一观察，因此将

85
00:06:09,660 --> 00:06:11,350
进行新的审查。

86
00:06:11,640 --> 00:06:17,730
所以这没有任何意义，这将使整个算法混乱，这就是为什么

87
00:06:17,730 --> 00:06:24,610
最好在此处选择标签，因为您知道当人们撰写评论时，他们不会在评论中放置标签。

88
00:06:24,690 --> 00:06:26,040
那将是非常罕见的。

89
00:06:26,040 --> 00:06:30,690
正如我们在本次特定评论中所看到的，他们将很容易提出。

90
00:06:30,870 --> 00:06:33,910
我们可以肯定Gunnar's的其他评论。

91
00:06:34,110 --> 00:06:35,940
是的，的确，我们这里还有另一个。

92
00:06:35,940 --> 00:06:37,720
这个地方不值得您花费时间。

93
00:06:37,740 --> 00:06:40,230
别说拉斯维加斯了。

94
00:06:40,350 --> 00:06:46,260
因此，在评论中加入一些评论者是很自然的，但在评论中加入一些标签是很不自然的

95
00:06:46,260 --> 00:06:52,830
重用，此外，如果您在撰写评论时按Tab键，那么转到下一个

96
00:06:52,830 --> 00:06:58,830
知道按钮，喜欢提交您的评论或其他内容，但是在

97
00:06:58,830 --> 00:07:03,360
撰写您的评论，您将无法摆脱评论，您将无法继续撰写

98
00:07:03,360 --> 00:07:03,740
它。

99
00:07:03,750 --> 00:07:10,500
所以我们永远不会在评论中找到标签，这就是为什么我们永远不会遇到这样的问题

100
00:07:10,500 --> 00:07:16,210
这些异常是由于在一次特定的评论中有重复的定界符。

101
00:07:16,590 --> 00:07:23,160
因此，我真的建议您使用水龙头分隔符以这种方式准备文本数据集，因为您将

102
00:07:23,160 --> 00:07:25,020
从来没有那种问题。

103
00:07:25,020 --> 00:07:31,050
如果您真的想使用C，则另一种解决方案是在此处添加一些双引号。

104
00:07:31,050 --> 00:07:35,550
评论左侧之一，右侧之一，但如果您仍然遇到一些问题，

105
00:07:35,550 --> 00:07:39,060
评论本身有一些双引号。

106
00:07:39,060 --> 00:07:40,710
我相信我们可以找到一个。

107
00:07:40,710 --> 00:07:44,910
让我们看一下press命令必须找到双引号。

108
00:07:44,910 --> 00:07:45,830
我们来了。

109
00:07:46,140 --> 00:07:48,300
这正是我所说的。

110
00:07:48,300 --> 00:07:51,080
例如，让我们在这里看看这篇评论。

111
00:07:51,090 --> 00:07:53,850
描述说的是百胜百胜酱。

112
00:07:53,880 --> 00:07:58,460
那是因为这里的人引用了某处的描述。

113
00:07:58,590 --> 00:08:01,780
因此，由于它正在编码，因此在这里使用了一些双引号。

114
00:08:01,800 --> 00:08:03,030
百胜酱。

115
00:08:03,030 --> 00:08:04,250
还有另一个在这里。

116
00:08:04,290 --> 00:08:10,750
因此，即使您使用双引号将您的评论与结果为一或零分开。

117
00:08:10,890 --> 00:08:16,590
好吧，您仍然会遇到这种问题，但是如果您将评论分开

118
00:08:16,590 --> 00:08:22,630
通过选项卡，您将永远不会遇到这种问题，因为没人会通过撰写评论来按下选项卡。

119
00:08:22,650 --> 00:08:30,150
因此，绝对是我们要使用的餐厅下划线点评点T S V标签分隔值

120
00:08:30,510 --> 00:08:35,880
顺便说一下，这是一个使用深层特征从一组纸张到单个标签的数据集

121
00:08:36,060 --> 00:08:37,700
通过舒适。

122
00:08:38,040 --> 00:08:44,520
因此，我们将使用已设置的内容，对于包含真实内容的每个评论，其中包含1000条评论

123
00:08:44,520 --> 00:08:46,950
结果0或1。

124
00:08:46,950 --> 00:08:52,740
因此，让我们开始执行我们的算法，我们将从第一步开始

125
00:08:52,740 --> 00:08:59,690
导入此数据集的餐厅评论将TSB导入Spider，这要归功于pantless。

126
00:08:59,700 --> 00:09:00,500
因此，让我们开始吧。

127
00:09:00,540 --> 00:09:04,790
让我们关闭它，让我们回到蜘蛛。

128
00:09:05,040 --> 00:09:05,720
好。

129
00:09:06,030 --> 00:09:06,840
像往常一样。

130
00:09:06,870 --> 00:09:10,520
好吧，有些事情将会改变，因为我们在导入文件时会导入a。

131
00:09:10,530 --> 00:09:15,130
但是像往常一样，我们将数据集称为数据集相等。

132
00:09:15,160 --> 00:09:17,180
现在就是我们使用Panas库的时候了。

133
00:09:17,180 --> 00:09:25,760
之所以使用PDV，是因为我们有一个捷径，因为我们听到它是括号，所以它会读取下划线C。

134
00:09:25,770 --> 00:09:35,710
现在，我们可以将数据集的名称放在引号中，即餐厅下划线评论，即T SV。

135
00:09:35,890 --> 00:09:41,020
这就是今天的名字，就是我们刚刚选择了他读过的餐厅，现在我们只是

136
00:09:41,020 --> 00:09:47,160
需要添加一些参数，因为我们当然是导入TSB文件，而在Scorsese上阅读

137
00:09:47,170 --> 00:09:50,190
Penders的函数期望像我们感觉到的c。

138
00:09:50,200 --> 00:09:56,110
因此，我们只需要添加一些不同的参数来指定我们要导入的A.S.C。 文件。

139
00:09:56,380 --> 00:10:04,410
因此，此参数实际上是限制器等于，并指定它不是极限

140
00:10:04,430 --> 00:10:08,040
或者，但制表符分隔符我们需要在此处加引号。

141
00:10:08,090 --> 00:10:09,890
斜杠T。

142
00:10:10,070 --> 00:10:13,160
这就是Penders的制表符分隔符。

143
00:10:13,190 --> 00:10:13,930
好吧。

144
00:10:14,090 --> 00:10:15,720
现在就完成了。

145
00:10:15,770 --> 00:10:19,160
熊猫会知道我们的两列之间用制表符分隔。

146
00:10:19,310 --> 00:10:26,030
太好了，但我们不会就此停止，因为在查看数据集时，我们发现可能

147
00:10:26,030 --> 00:10:29,540
还有一些与双引号有关的问题。

148
00:10:29,540 --> 00:10:35,060
因此，我们需要确保这些双引号不会有任何问题，并避免出现这种情况。

149
00:10:35,060 --> 00:10:36,030
有点问题。

150
00:10:36,090 --> 00:10:37,280
有什么好做的。

151
00:10:37,280 --> 00:10:41,030
这不是强制性的，但您只知道确保一切正常即可。

152
00:10:41,270 --> 00:10:44,030
好吧，我们需要忽略这些双引号。

153
00:10:44,030 --> 00:10:47,310
您知道我们永远不知道这些双重代码可能会导致问题。

154
00:10:47,330 --> 00:10:48,800
因此，最好忽略它们。

155
00:10:48,800 --> 00:10:55,300
忽略它们的技巧只是在此处添加另一个参数，即引号参数。

156
00:10:55,430 --> 00:11:00,920
实际上，有一些代码用于此编码参数，并且该代码忽略了双引号

157
00:11:01,130 --> 00:11:02,930
是值3。

158
00:11:02,930 --> 00:11:03,220
好吧。

159
00:11:03,230 --> 00:11:08,720
因此，通过在此处包含等于三的引号，我们将忽略双引号。

160
00:11:08,720 --> 00:11:09,130
好吧。

161
00:11:09,140 --> 00:11:10,120
那是真的。

162
00:11:10,130 --> 00:11:14,020
现在，我们也准备导入我们的餐厅评论。

163
00:11:14,030 --> 00:11:17,410
现在，让我们看看在这里导入数据集时的样子。

164
00:11:17,420 --> 00:11:25,550
还有Spider，因此我将选择所有内容，因为这些库尚未导入。

165
00:11:25,640 --> 00:11:27,910
因此，我们还需要包括该代码部分。

166
00:11:28,070 --> 00:11:32,970
因此，现在让我们按下命令控件和Antar来执行。

167
00:11:33,080 --> 00:11:35,750
在这里，它可以正确导入数据集。

168
00:11:35,750 --> 00:11:39,470
现在让我们去罗伊探索，一切看起来都很棒。

169
00:11:39,470 --> 00:11:43,800
我们有1000个观察值和两个专栏。

170
00:11:43,880 --> 00:11:45,280
让我们来看一下。

171
00:11:45,620 --> 00:11:50,720
如您所见，所有评论都与判决完全分开。

172
00:11:50,720 --> 00:11:53,170
无论是正面评论还是负面评论。

173
00:11:53,360 --> 00:11:55,480
因此，这里的一切看起来都很不错。

174
00:11:55,490 --> 00:12:00,770
而且，我们需要确保拥有1000条评论，以便在这里轻松看到。

175
00:12:00,770 --> 00:12:06,560
但是您知道我们有1000条评论，当我向上滚动时，可以看到所有评论都很好

176
00:12:06,740 --> 00:12:14,150
在检查列中，所有亮结果0 0 1都很好，并且颜色浅。

177
00:12:14,150 --> 00:12:22,500
在这里，您可以看到如果我向上滚动，我们在like栏中没有任何评论，或者在评论栏中没有1或0。

178
00:12:22,580 --> 00:12:23,910
因此，一切看起来都很不错。

179
00:12:24,290 --> 00:12:29,090
我们准备继续进行下一步，即清理不同的评论。

180
00:12:29,120 --> 00:12:34,940
自然语言处理中有一个强制性步骤，其中包括清理文本以使

181
00:12:34,940 --> 00:12:38,720
它为我们未来的机器学习算法做好了准备。

182
00:12:38,960 --> 00:12:42,620
这就是我们将在下一个教程中做的，然后再享受机器学习

