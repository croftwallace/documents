1
00:00:00,330 --> 00:00:02,660
您好，欢迎来到本Python教程。

2
00:00:02,730 --> 00:00:08,500
因此，我们刚刚完成了全文学习过程，第一次查看了数据集。

3
00:00:08,610 --> 00:00:10,890
那是小康地方的审查。

4
00:00:11,040 --> 00:00:14,580
这篇评论原本是三个小点。

5
00:00:14,610 --> 00:00:20,960
很喜欢这个地方，在清洁过程之后，这篇点评成为了“哇爱”的地方。

6
00:00:21,090 --> 00:00:26,290
因此，删除了三个小点，所有大写字母均以相同的字母放下

7
00:00:26,310 --> 00:00:32,200
案例和词干被应用，这意味着变势成为爱。

8
00:00:32,220 --> 00:00:37,260
这就是第一次审核的结果，现在我们将对所有不同的审核执行相同的操作

9
00:00:37,260 --> 00:00:41,260
这就是我们数据集的所有1000条评论。

10
00:00:41,310 --> 00:00:42,420
因此，让我们开始吧。

11
00:00:42,420 --> 00:00:50,380
当然，我们将完全需要这样做，并且我们将为将来的1000条干净的评论重建一份新清单。

12
00:00:50,610 --> 00:00:57,570
因此，由于我们正在构建新列表，因此我们将在此处初始化一个新列表，并在此处进行操作，因为

13
00:00:57,960 --> 00:01:03,690
初始化此列表后，我们将获得Foluke，因此当然在循环中

14
00:01:03,690 --> 00:01:09,190
不想在这里包括所有这些导入，因为仅库已被导入。

15
00:01:09,390 --> 00:01:19,650
因此，让我们初始化此将来的1018条评论的新列表，我们将其称为列表语料库，因为

16
00:01:19,650 --> 00:01:23,850
我们实际上正在创建一个包含1000条干净评论的语料库。

17
00:01:24,090 --> 00:01:30,050
实际上，我们称它为语料库，因为在自然语言中，语料库是一个常用词

18
00:01:30,390 --> 00:01:34,640
基本上，语料库是可以是任何东西的文本文本的集合。

19
00:01:34,650 --> 00:01:41,580
我们目前正在处理的一些评论或一些较长的文本（如文章书本）已报废

20
00:01:41,640 --> 00:01:49,100
哈。 页面您想要的任何类型的文本以及一个语料库都是相同类型的文本的集合。

21
00:01:49,110 --> 00:01:57,270
因此，语料库由于将成为列表，因此我们将通过以下方式将其初始化为空列表

22
00:01:57,270 --> 00:01:58,860
一些括号。

23
00:01:58,860 --> 00:02:04,380
正确，因此我们的语料库已初始化，现在是时候创建循环了。

24
00:02:04,440 --> 00:02:12,440
所以对于这里，通过我们数据集的所有不同评论的索引将是我进入

25
00:02:12,440 --> 00:02:18,680
索引，现在我们需要指定要采用不同值的范围。

26
00:02:18,810 --> 00:02:23,250
因此，它当然是在范围和括号内。

27
00:02:23,250 --> 00:02:26,920
因此，现在我们只需要查看数据集的索引即可。

28
00:02:26,970 --> 00:02:31,870
因此，它从零开始，到999结束。

29
00:02:32,040 --> 00:02:36,540
让我们记住，排除范围函数的上限。

30
00:02:36,540 --> 00:02:40,600
因此上限将不是999，而是1000。

31
00:02:40,620 --> 00:02:44,850
因此，让我们按OK，然后将参数放入此range函数中。

32
00:02:44,850 --> 00:02:54,080
因此，刚设置时，下限是零索引，上限是1000索引。

33
00:02:54,090 --> 00:02:55,290
开始了。

34
00:02:55,290 --> 00:02:55,890
好了

35
00:02:55,920 --> 00:02:58,620
现在我们需要在此处添加一些颜色。

36
00:02:58,640 --> 00:02:59,300
好吧。

37
00:02:59,490 --> 00:03:06,780
现在我们要做的就是包括所有这些，这是应用于一个特定对象的所有清洁过程

38
00:03:06,780 --> 00:03:11,430
评论，到目前为止是第一个以0索引的评论。

39
00:03:11,590 --> 00:03:17,130
现在，我将为您提供一个很好的捷径，以使所有内容正确对齐，即从此处选择所有内容

40
00:03:17,130 --> 00:03:22,440
在这里，您需要知道该循环中的内容，因为这将应用于一项评论，我们将应用

41
00:03:22,440 --> 00:03:26,230
对于所有不同的评论来说，这里的for循环都是如此。

42
00:03:26,460 --> 00:03:31,400
因此，将其对齐的诀窍是按下并加上顶部。

43
00:03:31,530 --> 00:03:32,520
然后你去。

44
00:03:32,580 --> 00:03:35,080
现在，所有这些清洁过程都在循环中。

45
00:03:35,190 --> 00:03:36,090
很好。

46
00:03:36,120 --> 00:03:39,330
现在我们只需要再更改一件事。

47
00:03:39,390 --> 00:03:43,250
这实际上适用于索引为零的第一个评论。

48
00:03:43,410 --> 00:03:49,590
而且由于我们要很好地适用于所有评论，因此我们当然需要在此处更改此零索引

49
00:03:50,140 --> 00:03:57,020
按索引，它将获取数据集不同评论的所有索引的值。

50
00:03:57,030 --> 00:04:01,770
很好，所以现在将清洁过程应用于所有评论。

51
00:04:01,770 --> 00:04:03,490
所以现在我们该怎么办。

52
00:04:03,630 --> 00:04:12,210
那么发生的是，它将取值从0到999，对于我们处理的每个值

53
00:04:12,210 --> 00:04:17,060
在对我们的数据集进行特定评论时，该评论由I索引。

54
00:04:17,220 --> 00:04:23,190
我们会通过所有筛选过程来清洁此评论，并在清洁过程结束时对我们进行评论

55
00:04:23,190 --> 00:04:29,370
成为一种压力，这是原始评论的非常简化的版本，而这正是

56
00:04:29,370 --> 00:04:32,230
我们需要在这里附加到我们的语料库。

57
00:04:32,460 --> 00:04:40,350
因此，在全文结尾处，我们要做的是将干净的评论添加到语料库中并执行此操作

58
00:04:40,740 --> 00:04:47,190
我们首先需要获取语料库，然后在此处点处，然后使用第一个附加函数

59
00:04:47,190 --> 00:04:47,780
功能年份。

60
00:04:47,790 --> 00:04:54,930
因此，我只需要按Enter键，然后在此处添加一些括号以指定需要添加的内容。

61
00:04:55,080 --> 00:04:59,500
当然，这是此过程的完整总结。

62
00:04:59,820 --> 00:05:05,880
因此，我们正在将该评论撰写到我们的语料库，其中将包含所有1000个主题评论。

63
00:05:05,910 --> 00:05:12,870
因此，实际上已经完成了for循环，我们准备清理所有评论并将其放入

64
00:05:13,200 --> 00:05:16,080
在这里，让我们开始吧。

65
00:05:16,410 --> 00:05:18,840
好吧，让我们一起做吧。

66
00:05:18,840 --> 00:05:23,520
所以现在我要做的是重新启动内核或在此处重新启动内核。

67
00:05:23,520 --> 00:05:24,880
确定要恢复通话吗？

68
00:05:24,900 --> 00:05:25,670
是。

69
00:05:25,710 --> 00:05:30,380
因此，现在所有内容都是全新的，不会在变量资源管理器中看到任何变量。

70
00:05:30,570 --> 00:05:35,440
因此，为了好玩，我将选择从这里到顶部的所有内容。

71
00:05:35,670 --> 00:05:41,530
因此，您知道我们将再次执行所有操作，将数据集导入库并应用此文本

72
00:05:41,570 --> 00:05:47,300
清洁流程，以创建所有新的清洁评论语料库。

73
00:05:47,310 --> 00:05:48,340
因此，让我们开始吧。

74
00:05:48,480 --> 00:05:51,720
让我们按命令控制并执行整个代码。

75
00:05:51,930 --> 00:05:53,360
现在我们开始。

76
00:05:53,670 --> 00:06:00,810
如您所见，我们拥有包含1000条原始评论的原始数据集，

77
00:06:00,900 --> 00:06:06,680
我们的新语料库包含1000条cleanthe评论，因此我们可以对其进行比较。

78
00:06:06,690 --> 00:06:12,360
因此，当然，第一个原始评论很受这个地方的欢迎，并且位置很好。

79
00:06:12,540 --> 00:06:15,900
第二个原始评论是外壳不好。

80
00:06:16,080 --> 00:06:18,710
而且此评论的干净版本是。

81
00:06:18,780 --> 00:06:23,720
很好，您可以看到原来的东西并没有被删除。

82
00:06:23,940 --> 00:06:24,990
这么好。

83
00:06:25,020 --> 00:06:31,260
然后，第三次评论就不好吃了，而且质地只是令人讨厌，因此变得很刺眼。

84
00:06:31,380 --> 00:06:34,090
站在这里和纹理的有趣结果。

85
00:06:34,170 --> 00:06:35,240
讨厌。

86
00:06:35,250 --> 00:06:35,950
好。

87
00:06:36,210 --> 00:06:42,020
第四次审核在5月下旬的里克·史蒂夫（Rick Steve）推荐的银行假期中停止了并喜欢它。

88
00:06:42,240 --> 00:06:48,250
截至5月下旬银行假期里克史蒂夫（Rick Steve）推荐的干净版本。

89
00:06:48,330 --> 00:06:48,810
好吧。

90
00:06:48,870 --> 00:06:55,670
删除了很少的内容，您将在接下来的教程中看到如何进一步简化此评论

91
00:06:55,680 --> 00:07:00,300
因为我们实际上只会保留出现次数最少的单词。

92
00:07:00,420 --> 00:07:07,350
当然，这种影响史蒂夫（Steve）在这里不会出现很多次，除了它具有相关性外，但它确实

93
00:07:07,350 --> 00:07:13,710
未删除，因为它当然不是停用词，但我们将通过过滤所有

94
00:07:13,710 --> 00:07:18,710
很少出现，我们会在创造道德寓言的背后这样做。

95
00:07:18,990 --> 00:07:21,610
这就是我们接下来的一个小时的工作。

96
00:07:21,660 --> 00:07:23,540
在此之前，享受机器学习

