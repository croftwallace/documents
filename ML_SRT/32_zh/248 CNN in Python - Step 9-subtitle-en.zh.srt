1
00:00:00,520 --> 00:00:03,370
您好，欢迎来到本Python教程。

2
00:00:03,370 --> 00:00:09,190
因此，我们刚刚完成了CNN的第1部分构建，即我们设计了卷积的体系结构

3
00:00:09,190 --> 00:00:14,840
神经网络，现在我们开始第二部分，我们将在CNN中拟合图像。

4
00:00:14,950 --> 00:00:19,930
所以我们实际上将一步完成，因为我们将使用一个快捷方式

5
00:00:19,930 --> 00:00:20,820
实际的。

6
00:00:20,830 --> 00:00:22,850
这是Cara的文档。

7
00:00:23,050 --> 00:00:24,540
我们将用它做什么。

8
00:00:24,640 --> 00:00:31,660
好吧，这就是所谓的“图像增强”过程，基本上包括对图像进行预处理

9
00:00:31,810 --> 00:00:37,170
为了防止过度拟合，因为会发生什么，然后我们将在本教程中获得结果。

10
00:00:37,270 --> 00:00:43,540
但是，如果我们不进行这种图像增强，那么我们可能会得到一个非常准确的结果

11
00:00:43,540 --> 00:00:47,220
训练集，但测试集的准确性低得多。

12
00:00:47,230 --> 00:00:52,840
因此，这恰好适合于这种特殊情况，在这种情况下，您可以获得出色的结果

13
00:00:52,930 --> 00:00:58,890
由于对训练集进行了新的改装，导致训练集上的测试结果和测试集上的结果差。

14
00:00:58,930 --> 00:01:04,940
因此，在填充我们的CNN之前，让我们继续进行此图像增强过程。

15
00:01:05,140 --> 00:01:09,840
所以现在我们将要使用浏览器，因为正如我刚刚告诉您的那样，我们将使用此Cairnes

16
00:01:09,880 --> 00:01:11,250
文档快捷方式。

17
00:01:11,500 --> 00:01:16,640
因此，在浏览器中，您可以键入Cara的文档。

18
00:01:16,720 --> 00:01:17,250
好吧。

19
00:01:17,470 --> 00:01:18,970
您可以按Enter。

20
00:01:19,000 --> 00:01:22,210
您只需点击第一个链接Cara的文档。

21
00:01:22,210 --> 00:01:22,950
开始了。

22
00:01:23,110 --> 00:01:24,690
那就是我们想要的页面。

23
00:01:24,700 --> 00:01:30,070
因此，基本上，在此页面上，您可以获得有关Cara的很多信息，并可以使用您所使用的代码

24
00:01:30,070 --> 00:01:31,950
可以接受您的深化项目。

25
00:01:32,170 --> 00:01:37,320
因此，现在我们需要的是用于图像增强图像预处理的一些信息或代码。

26
00:01:37,330 --> 00:01:41,260
因此，在左侧的这些窗口中，我们将寻找预处理。

27
00:01:41,260 --> 00:01:42,000
这里是。

28
00:01:42,220 --> 00:01:44,200
那是我们感兴趣的部分。

29
00:01:44,200 --> 00:01:50,010
在您可以看到的部分中，有一些有关序列预处理文本预处理的信息

30
00:01:50,020 --> 00:01:54,530
是的，确实可以通过非常强大的方式对文本进行删除。

31
00:01:54,580 --> 00:01:58,640
当然，图像预处理正是我们现在感兴趣的。

32
00:01:58,720 --> 00:02:01,420
因此，让我们单击它，看看我们得到了什么。

33
00:02:01,420 --> 00:02:01,780
好吧。

34
00:02:01,780 --> 00:02:05,170
首先要看的是这个图像数据生成器。

35
00:02:05,200 --> 00:02:10,470
这是我们将用于生成此图像增强的第一个功能。

36
00:02:10,480 --> 00:02:14,270
那么什么是图像增强，它将如何防止过度拟合。

37
00:02:14,590 --> 00:02:20,230
好吧，我们知道导致过度拟合的情况之一是，当我们有新的数据来训练我们的

38
00:02:20,230 --> 00:02:26,740
这种情况下的模型，我们的模型在列车组的一些观测值中发现了一些相关性，但是

39
00:02:26,740 --> 00:02:30,720
未能在一些新发现中概括这些相关性。

40
00:02:30,730 --> 00:02:37,000
当涉及图像时，我们实际上需要大量图像来查找和归纳一些相关性

41
00:02:37,240 --> 00:02:42,070
因为在计算机视觉或机器学习模型中，不仅仅需要找到

42
00:02:42,070 --> 00:02:44,900
一些独立变量和一些依赖叛军。

43
00:02:44,980 --> 00:02:50,810
它需要在像素中找到一些图案，并且为此需要大量图像。

44
00:02:50,830 --> 00:02:57,220
现在，我们在训练集上处理10000张图像8000张图像，实际上这不是

45
00:02:57,220 --> 00:03:00,150
以获得一些出色的性能结果。

46
00:03:00,190 --> 00:03:03,630
我们要么需要更多图像，要么可以使用技巧。

47
00:03:03,850 --> 00:03:06,820
这就是数据增强发挥作用的地方。

48
00:03:06,850 --> 00:03:13,600
那是窍门，因为它将要做的是创建许多批次的图像，然后每幅图像

49
00:03:13,600 --> 00:03:19,780
批量处理，它将对图像的随机选择进行一些随机变换，就像旋转一样

50
00:03:19,780 --> 00:03:23,500
他们翻转他们转移他们甚至剪切他们。

51
00:03:23,500 --> 00:03:29,830
最终，我们在培训期间将获得这些批次中更多不同的图像，

52
00:03:29,830 --> 00:03:32,690
因此需要培训更多的材料。

53
00:03:32,800 --> 00:03:36,120
现在我们了解了为什么将其称为图像增强。

54
00:03:36,220 --> 00:03:42,790
那是因为我们的训练图像的数量增加了，因为变换是

55
00:03:42,790 --> 00:03:44,150
随机变换。

56
00:03:44,260 --> 00:03:48,020
井孔永远不会在所有批次中找到相同的图片。

57
00:03:48,130 --> 00:03:53,850
因此，所有这些图像增强技巧只能减少过度拟合。

58
00:03:53,860 --> 00:03:59,860
因此，总而言之，图像增强是一种技术，可让我们丰富训练集的数据集

59
00:04:00,160 --> 00:04:05,170
无需添加更多图像，因此这使我们能够以很少的代价获得良好的性能结果

60
00:04:05,170 --> 00:04:08,830
甚至没有少量图像也不会过拟合。

61
00:04:08,830 --> 00:04:15,360
因此，现在让我们在图像上应用此图像增强功能，并使用此快捷方式。

62
00:04:15,370 --> 00:04:21,910
我告诉您有关哪些是准备使用的代码，我们可以在此页面上找到相应的代码

63
00:04:21,910 --> 00:04:28,140
我们对数据集的结构非常了解，因为您可以看到有两种预处理方法

64
00:04:28,150 --> 00:04:31,020
仅通过对它们应用图像增强即可获得图像。

65
00:04:31,030 --> 00:04:36,640
通过使用基于float方法的此代码或基于流程的此代码

66
00:04:36,640 --> 00:04:38,120
从目录方法。

67
00:04:38,350 --> 00:04:43,390
正如您可能已经猜到的，我们将在此处使用此代码部分，因为我们将

68
00:04:43,450 --> 00:04:49,420
我们从构建的数据集中获得的数据构成了特定的结构，以便我们的类

69
00:04:49,420 --> 00:04:53,400
可以很好地识别出来，并且这些单独的文件夹是猫还是狗。

70
00:04:53,470 --> 00:04:58,510
由于此数据集位于工作目录中，因此我们在此使用此功能。

71
00:04:58,510 --> 00:05:00,000
目录流。

72
00:05:00,010 --> 00:05:04,620
因此，在此功能内部，而不是放置目录，我们将放置数据集。

73
00:05:04,970 --> 00:05:06,830
因此，为什么将其称为快捷方式。

74
00:05:06,970 --> 00:05:12,610
那是因为在这里的代码部分中，我们具备了预处理图像所需的一切

75
00:05:12,880 --> 00:05:18,880
记录它们，甚至填充我们仅建立在图像上的卷积神经网络。

76
00:05:19,030 --> 00:05:25,990
基本上，这就是代码的结尾，因为这种适合生成器方法不仅适合我们的CNN

77
00:05:25,990 --> 00:05:31,660
训练集，但它还将同时在一些新观察值上测试其性能

78
00:05:31,810 --> 00:05:34,060
这将是我们测试的观察结果。

79
00:05:34,150 --> 00:05:36,460
那就是图像被测试的文件夹。

80
00:05:36,670 --> 00:05:38,400
因此，这是完美的，我们拥有我们需要的一切。

81
00:05:38,400 --> 00:05:45,250
所以这部分是图像增强部分，我们在其中应用了一些变换，例如重新缩放

82
00:05:45,250 --> 00:05:50,740
好吧，重新缩放始终是强制性的，它对应于数据处理的功能部分

83
00:05:50,740 --> 00:05:55,090
我们知道的阶段，然后我们进行其他转换，例如纯粹的范围转换。

84
00:05:55,090 --> 00:06:00,640
因此，这对应于共享，您知道共享是一种几何变换，也称为

85
00:06:00,640 --> 00:06:07,360
交易，像素从固定位置到移动方向的固定距离成比例

86
00:06:07,360 --> 00:06:10,630
与其移动方向平行的线。

87
00:06:10,630 --> 00:06:16,400
因此，基本上，对于评论或图像的相同目的，这仅仅是几何变换。

88
00:06:16,480 --> 00:06:20,710
然后我们还有其他一些转换，例如缩放范围。

89
00:06:20,710 --> 00:06:26,890
因此，这是一种随机缩放，适用于我们的图像，并且还具有水平翻转

90
00:06:27,190 --> 00:06:29,910
水平翻转图像。

91
00:06:29,910 --> 00:06:33,970
我们也有一个垂直翻转，但是这里没有使用。

92
00:06:34,000 --> 00:06:40,080
我们可以玩得开心，并应用此Keres文档中提供的所有图像转换。

93
00:06:40,270 --> 00:06:45,250
但是现在，我们仅选择此示例中的内容就足够了，您将看到

94
00:06:45,280 --> 00:06:47,230
我们会取得良好的结果。

95
00:06:47,230 --> 00:06:50,140
好的，这就是图像增强部分。

96
00:06:50,170 --> 00:06:54,070
现在，此图像增强点已应用到火车上。

97
00:06:54,220 --> 00:07:00,670
然后，我们再次使用此图像数据生成的函数，这一次仅重新缩放了我们的图像

98
00:07:00,670 --> 00:07:05,550
测试，然后我们有这两部分趋势生成器和验证生成器。

99
00:07:05,680 --> 00:07:10,330
这两部分实际上创建了训练集和测试集。

100
00:07:10,330 --> 00:07:12,600
因此，当我们回到蜘蛛时，我们将要做的是。

101
00:07:12,820 --> 00:07:17,850
好吧，我们将其称为训练集和该测试集，我们可以清楚地看到正在发生的事情。

102
00:07:17,890 --> 00:07:23,740
基本上，这是在本节中，我们将创建由所有这些增强功能组成的训练集

103
00:07:23,830 --> 00:07:30,430
从我们的图像数据生成器提取的图像以及本节相同的部分将创建我们的测试集，

104
00:07:30,430 --> 00:07:34,140
将在代码的这一部分中用来评估模型的性能。

105
00:07:34,270 --> 00:07:40,030
而Sam从我们的图像数据生成器中提取的测试图像就是应用

106
00:07:40,120 --> 00:07:41,250
在我们的测试中。

107
00:07:41,530 --> 00:07:47,170
然后我们在这里有此代码部分，它将适合我们的卷积神经网络模型

108
00:07:47,170 --> 00:07:50,820
训练集并在测试中测试其性能。

109
00:07:51,100 --> 00:07:54,350
因此，让我们开始吧。

110
00:07:54,390 --> 00:07:57,010
我们将进行一些更改，但很少更改。

111
00:07:57,190 --> 00:08:04,150
现在，让我们回到Spider上，将整个代码节构建到我们的编辑器中。

112
00:08:04,180 --> 00:08:04,540
好吧。

113
00:08:04,550 --> 00:08:06,150
现在，我们需要更改一些内容。

114
00:08:06,160 --> 00:08:11,140
我们首先需要做的第一件事是导入允许我们使用此图像的类

115
00:08:11,140 --> 00:08:12,660
数据生成器功能。

116
00:08:12,880 --> 00:08:21,970
这个类称为图像数据生成器，我们从Chris Dodd预处理中导入该类

117
00:08:23,210 --> 00:08:31,030
损坏并导入，最终生成图像数据。

118
00:08:31,410 --> 00:08:36,180
好的，现在我们在下一节中上课。

119
00:08:36,180 --> 00:08:38,730
好的，因此在本节中，我们将保持不变。

120
00:08:38,730 --> 00:08:43,510
我们将在0到1之间重新缩放所有像素值。

121
00:08:43,530 --> 00:08:47,380
因为您知道像素取0到255之间的值。

122
00:08:47,490 --> 00:08:54,720
通过使用此重新缩放比例将它们重新缩放等于255，则我们所有的像素值将介于

123
00:08:54,810 --> 00:08:56,070
0和1。

124
00:08:56,160 --> 00:09:02,070
然后她安排将其应用于随机交易，我们将保持此交易的价值缩放范围为

125
00:09:02,070 --> 00:09:05,480
进行一些随机缩放，我们将保持开放的价值。

126
00:09:05,490 --> 00:09:12,210
因此，这里的0.2值只是您要应用这些随机变换的数量的一些参数。

127
00:09:12,210 --> 00:09:16,330
在这里，我们将采用Karen的建议，然后进行水平翻转。

128
00:09:16,350 --> 00:09:23,880
这意味着我们的图像将水平翻转，这样就可以产生足够的变换

129
00:09:24,150 --> 00:09:27,720
这样我们就不会在不同批次中找到相同的图像。

130
00:09:27,720 --> 00:09:31,330
因此，基本上，我们在此代码部分中没有任何更改。

131
00:09:31,560 --> 00:09:33,080
我们可以继续进行下一个。

132
00:09:33,160 --> 00:09:34,080
遗嘱世代

133
00:09:34,170 --> 00:09:39,840
同样在这里，我们只需要重新缩放测试设置的图像的像素，以使它们具有

134
00:09:39,840 --> 00:09:41,440
值介于0和1之间。

135
00:09:41,490 --> 00:09:43,060
因此，这也很好。

136
00:09:43,080 --> 00:09:44,610
我们不需要更改任何内容。

137
00:09:44,820 --> 00:09:48,740
但是，我们这里有这段代码部分，用于创建训练集。

138
00:09:48,930 --> 00:09:50,790
在这里，我们有几件事需要更改。

139
00:09:50,790 --> 00:09:56,100
因此，首先让我们为趋势生成器起另一个名字，并将其称为训练集。

140
00:09:56,550 --> 00:10:01,190
让我们按alt shift键使所有内容对齐。

141
00:10:01,230 --> 00:10:02,980
因此，在这里我们需要更改什么。

142
00:10:03,090 --> 00:10:08,950
首先，第一个参数是我们从哪个目录提取图像。

143
00:10:09,150 --> 00:10:12,390
因此它不是来自最后的火车目录。

144
00:10:12,420 --> 00:10:13,790
让我们看看它来自哪里。

145
00:10:14,010 --> 00:10:19,440
好的，请记住我们这里是由两个文件夹组成的数据集。

146
00:10:19,530 --> 00:10:21,600
训练集和测试集。

147
00:10:21,600 --> 00:10:26,860
因此，由于此处与火车组的创建相对应，因此我们需要指定

148
00:10:26,860 --> 00:10:27,990
这个训练集是。

149
00:10:28,170 --> 00:10:34,290
因此，我们需要指定路径即数据集斜线训练集。

150
00:10:34,680 --> 00:10:39,930
而且我们不必指定通向该数据集的整个路径，因为该数据集已经

151
00:10:39,930 --> 00:10:47,540
在工作目录中加上前缀，然后再加上目标尺寸，因此目标尺寸就是图片的尺寸

152
00:10:47,880 --> 00:10:50,930
在您的CNN模型中是可以预期的。

153
00:10:50,970 --> 00:10:59,640
因此，正如您在此处看到的那样，我们为图像选择了64 x 64的尺寸，因此我们无法保留此尺寸

154
00:10:59,640 --> 00:11:01,720
150和150。

155
00:11:01,830 --> 00:11:11,250
我们需要将CNN期望的尺寸设置为64和64位。

156
00:11:11,610 --> 00:11:12,780
然后是批量大小。

157
00:11:12,780 --> 00:11:17,650
这就是其中将包含我们图像的一些随机样本的批处理的大小。

158
00:11:17,820 --> 00:11:22,950
并包含将通过CNN的图像数量，权重为

159
00:11:22,950 --> 00:11:23,550
更新。

160
00:11:23,700 --> 00:11:25,530
因此，我们将在此处保留32个。

161
00:11:25,590 --> 00:11:28,390
实际上，这在CNN上看起来不错。

162
00:11:28,740 --> 00:11:30,080
最后是E级模式。

163
00:11:30,150 --> 00:11:36,480
好吧，这是表明您的类的因变量是二进制变量还是具有大于

164
00:11:36,480 --> 00:11:39,700
两个类别，因此既然我们在这里有两个类别。

165
00:11:39,720 --> 00:11:40,710
猫和狗。

166
00:11:40,850 --> 00:11:42,490
好吧，类模式是二进制的。

167
00:11:42,750 --> 00:11:43,400
很好。

168
00:11:43,440 --> 00:11:45,380
现在本节已经准备好了。

169
00:11:45,390 --> 00:11:47,120
现在，让我们继续下一部分。

170
00:11:47,250 --> 00:11:48,780
验证生成器。

171
00:11:48,780 --> 00:11:54,770
因此，我们实际将其称为测试集，因为此代码部分将创建测试集。

172
00:11:54,990 --> 00:11:59,580
现在，让我们调整我要改变的一切。

173
00:11:59,700 --> 00:12:01,330
现在让我们看看我们需要改变什么。

174
00:12:01,410 --> 00:12:05,520
因此，首先我们需要在此处输入通向测试集的路径。

175
00:12:05,670 --> 00:12:09,860
这与我们在此处需要的训练集完全相同。

176
00:12:09,990 --> 00:12:19,300
首先设置数据，然后测试而不是验证，而是在此处设置目标大小。

177
00:12:19,380 --> 00:12:20,580
嗯，是一样的。

178
00:12:20,580 --> 00:12:27,870
CNN预期我们的测试图像将具有64 x 64尺寸，因此

179
00:12:27,870 --> 00:12:31,930
在这里，我们还需要将150替换为64。

180
00:12:32,160 --> 00:12:33,900
和这里一样。

181
00:12:33,900 --> 00:12:35,150
64。

182
00:12:35,160 --> 00:12:35,810
好吧。

183
00:12:36,000 --> 00:12:42,690
然后，由于我们具有二进制结果，因此还将保持此批处理大小（32）和相同的类模式二进制。

184
00:12:42,690 --> 00:12:43,110
大。

185
00:12:43,110 --> 00:12:49,590
现在，我们最后来剖析模型拟合生成器，在其中将我们拟合到训练集中

186
00:12:49,620 --> 00:12:53,370
因此也要在测试集上测试其性能。

187
00:12:53,460 --> 00:12:56,460
好吧，首先让我们重新排列所有内容。

188
00:12:57,840 --> 00:12:58,340
开始了。

189
00:12:58,340 --> 00:12:59,980
现在让我们改变最后的事情。

190
00:13:00,210 --> 00:13:03,700
好吧，这里第22个参数是我们的训练集。

191
00:13:03,810 --> 00:13:11,410
因此，我们将替换训练集生成的训练，然后替换第二个参数作为Epoque的样本。

192
00:13:11,510 --> 00:13:17,120
好吧，这只是我们训练集中的图像数量，因为请记住所有观察结果

193
00:13:17,120 --> 00:13:21,850
在每个时期，训练集的样本通过卷积神经网络。

194
00:13:22,010 --> 00:13:30,120
而且由于我们的训练集中有8000张图像，所以这里我们需要用8000替换2000。

195
00:13:30,230 --> 00:13:31,520
错误数量。

196
00:13:31,670 --> 00:13:35,180
好吧，这是您想要选择训练我们的CNN的时期数。

197
00:13:35,180 --> 00:13:40,340
在这里50可能有点太多，所以我们将采取25，这样我们就不必等待太久

198
00:13:40,340 --> 00:13:43,840
得到我们的结果，然后是验证数据。

199
00:13:44,030 --> 00:13:48,850
因此，这对应于我们要评估CNN性能的测试集。

200
00:13:49,010 --> 00:13:50,690
那当然是测试集。

201
00:13:50,690 --> 00:13:58,730
因此，我们将用测试集替换验证生成器，几乎是最后一个好参数

202
00:13:58,740 --> 00:14:02,920
样本，并且对应于我们测试集中的图像数量。

203
00:14:03,100 --> 00:14:06,280
那是两千。

204
00:14:06,280 --> 00:14:06,940
完善。

205
00:14:07,060 --> 00:14:10,180
现在，我们只需要更改最后一件事，您就能猜出它是什么。

206
00:14:10,330 --> 00:14:16,460
好吧，我们正在使用这种生成方法来将CNN适配到我们的火车中，并在

207
00:14:16,460 --> 00:14:18,160
同时进行测试。

208
00:14:18,160 --> 00:14:24,990
并且此预先生成的方法已应用于我们的CNN模型，但我们的CNN模型未称为模型。

209
00:14:25,000 --> 00:14:26,650
它称为分类器。

210
00:14:26,890 --> 00:14:32,910
因此，我们只需要在这里通过分类来替换模​​型，那就是一行。

211
00:14:32,910 --> 00:14:40,020
我将再次改变这一点，以便现在我们将这种恐惧生成方法应用于分类器以使其适合

212
00:14:40,020 --> 00:14:42,710
训练集并在测试中进行测试。

213
00:14:42,980 --> 00:14:49,640
太好了，现在一切都准备好了，我们可以一一执行所有这些最后的部分，

214
00:14:49,640 --> 00:14:52,330
最终，我们将获得最终结果。

215
00:14:52,490 --> 00:14:55,250
因此，让我们一一执行它们。

216
00:14:55,280 --> 00:14:59,650
我们将从导入图像数据开始生成类开始。

217
00:14:59,660 --> 00:15:00,380
开始了。

218
00:15:00,400 --> 00:15:01,410
好进口。

219
00:15:01,610 --> 00:15:09,230
现在，让我们继续下一部分，以实际准备图像增强

220
00:15:09,530 --> 00:15:14,150
训练数据agend，它是图像数据生成类的对象。

221
00:15:14,150 --> 00:15:16,670
因此，在本节中，我们将创建此对象。

222
00:15:16,670 --> 00:15:19,030
所以我要按百分比执行。

223
00:15:19,160 --> 00:15:25,490
现在，我们创建了图像数据生成类的对象，并且该对象是我们正在

224
00:15:25,490 --> 00:15:29,010
将用于增强训练集的图像。

225
00:15:29,330 --> 00:15:31,550
现在，我们将对测试集执行相同的操作。

226
00:15:31,640 --> 00:15:37,940
我们将创建图像的另一个对象，生成的类和该对象将是

227
00:15:37,940 --> 00:15:45,170
用于预处理测试图像，然后应用此代码部分中的下一个代码部分

228
00:15:45,260 --> 00:15:51,290
通过同时调整我们所有的尺寸来在训练集的图像上进行图像增强

229
00:15:51,290 --> 00:15:58,670
训练图像分为64乘以64维，并创建了32批次

230
00:15:58,670 --> 00:16:04,160
图片，然后我们的CNN将在所有不同批次的图片上接受训练。

231
00:16:04,160 --> 00:16:06,640
好的，让我们执行本节。

232
00:16:06,680 --> 00:16:09,710
如您所见，这实际上非常有趣。

233
00:16:09,830 --> 00:16:17,000
卡拉（Cara）找到了8000张属于两个类别的图像，这尤其要归功于我们

234
00:16:17,000 --> 00:16:22,970
将我们的图像整理到我们的数据集文件夹中，您知道将此数据集文件夹扩展到测试文件夹中

235
00:16:23,150 --> 00:16:29,320
由2000张测试图像组成，培训说它们由八千张培训图像组成。

236
00:16:29,330 --> 00:16:34,510
因此，这就是为什么我告诉您这是一种预处理数据的好方法。

237
00:16:34,550 --> 00:16:36,470
当我们处理图像时。

238
00:16:36,470 --> 00:16:41,870
然后下一部分与测试集相同，在本部分中，我们将创建测试集。

239
00:16:42,020 --> 00:16:47,180
我们正在将测试集的所有图像调整为我提到的64 x 64。

240
00:16:47,360 --> 00:16:51,460
并同时创建一批32张图片。

241
00:16:51,500 --> 00:16:55,800
现在，让我们执行本节，我们可以猜测我们现在将要得到什么。

242
00:16:55,910 --> 00:16:59,730
我们应该已经找到了属于两类的2000张图像。

243
00:16:59,930 --> 00:17:00,870
让我们来看看。

244
00:17:00,870 --> 00:17:02,080
我要执行。

245
00:17:02,240 --> 00:17:03,120
现在我们开始。

246
00:17:03,170 --> 00:17:06,220
找到属于两类的2000张图像。

247
00:17:06,230 --> 00:17:10,650
因此，当然是测试集的2000张图像。

248
00:17:10,760 --> 00:17:16,200
现在是最后一节了，但是我必须警告您，这将需要一些时间。

249
00:17:16,310 --> 00:17:21,770
因此，目前的一个好主意是在您午餐，晚餐甚至什至是午餐之前运行此代码

250
00:17:21,770 --> 00:17:22,610
打盹儿。

251
00:17:22,640 --> 00:17:24,260
我现在要午睡。

252
00:17:24,390 --> 00:17:27,820
但是我的意思是，它不会花10秒钟来执行。

253
00:17:27,860 --> 00:17:29,870
这将是10或20分钟。

254
00:17:30,020 --> 00:17:35,550
但是无论如何，我们现在准备执行并找出最终结果。

255
00:17:35,660 --> 00:17:36,800
因此，让我们检查一下。

256
00:17:36,890 --> 00:17:38,570
我现在要执行。

257
00:17:38,600 --> 00:17:41,570
你准备好了吗？

258
00:17:41,570 --> 00:17:42,320
开始了。

259
00:17:42,320 --> 00:17:44,160
25个中的第一个。

260
00:17:44,180 --> 00:17:50,360
如您所见，这将需要一段时间，因为目前正在训练8000张

261
00:17:50,360 --> 00:17:54,140
训练集，它将超过25美元。

262
00:17:54,140 --> 00:17:55,300
因此，让我们休息一下。

263
00:17:55,310 --> 00:17:58,030
让我们喝杯咖啡，让它自己运行。

264
00:17:58,040 --> 00:18:01,180
我将快速打个in，稍后再见。

265
00:18:03,220 --> 00:18:04,250
现在我们开始。

266
00:18:04,270 --> 00:18:05,950
培训结束了。

267
00:18:05,950 --> 00:18:12,910
对于火车，我们获得了84％的准确度，对于测试，获得了75％的准确度。

268
00:18:13,150 --> 00:18:14,940
那么您如何看待这些结果。

269
00:18:15,070 --> 00:18:18,280
不错，但也不太好。

270
00:18:18,460 --> 00:18:22,970
好的，所以首先我们在训练集上获得了百分之八十四的准确率。

271
00:18:23,140 --> 00:18:27,430
不错，但这不是我们最感兴趣的。

272
00:18:27,430 --> 00:18:33,430
我们最感兴趣的是测试集的准确度，等于75％，

273
00:18:33,430 --> 00:18:39,070
训练集的准确性和测试集的准确性之间的差异，以评估是否

274
00:18:39,070 --> 00:18:40,880
是否有过度拟合。

275
00:18:41,140 --> 00:18:44,770
因此，测试中75％的准确性还不错。

276
00:18:44,770 --> 00:18:48,160
这意味着我们从四分之三中获得了三个正确的预测。

277
00:18:48,190 --> 00:18:49,500
因此，这实际上还不错。

278
00:18:49,540 --> 00:18:54,260
但是然后我们在准确性和训练集与准确性之间有了很大的差异

279
00:18:54,260 --> 00:18:55,270
和测试。

280
00:18:55,270 --> 00:19:00,700
因此，这并不是重要的过度拟合，而是仍有很大的改进空间

281
00:19:00,700 --> 00:19:03,430
只有我们才能提高测试集的准确性。

282
00:19:03,610 --> 00:19:08,980
而且您知道一个很好的目标，那就是当我们使精度达到

283
00:19:09,010 --> 00:19:09,890
80％。

284
00:19:10,000 --> 00:19:15,160
而且除了您想要得到的以外，训练集的准确性之间还有很小的差异

285
00:19:15,310 --> 00:19:16,780
和其中一项测试。

286
00:19:16,930 --> 00:19:18,090
这就是我们的挑战。

287
00:19:18,190 --> 00:19:21,440
让我们尝试提高测试的准确性。

288
00:19:21,490 --> 00:19:26,900
超过80％的培训和准确性与准确性测试之间的差异。

289
00:19:26,920 --> 00:19:28,750
这是我们在下一个教程中将要做的。

290
00:19:28,780 --> 00:19:34,180
但是在进入下一个教程之前，请尝试找出一些想法来改进并达到这些目标

291
00:19:34,180 --> 00:19:40,050
目标，我会在此部分的标题中提示您这一改进的答案。

292
00:19:40,060 --> 00:19:42,890
祝您好运，我将在下一个教程中与您见面。

293
00:19:43,120 --> 00:19:44,720
在此之前，请享受机器学习。

