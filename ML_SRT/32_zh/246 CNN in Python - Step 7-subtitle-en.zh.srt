1
00:00:00,240 --> 00:00:02,400
您好，欢迎来到本Python教程。

2
00:00:02,670 --> 00:00:04,600
再走三步就走了。

3
00:00:04,680 --> 00:00:10,140
我们要做的最后一步是完整的连接步骤，基本上包括

4
00:00:10,140 --> 00:00:13,800
经典，然后由一些完全相连的字母组成。

5
00:00:13,980 --> 00:00:15,800
那么，为什么我们需要完成此工作呢？

6
00:00:15,900 --> 00:00:21,720
那是因为我们设法将输入图像转换成包含

7
00:00:21,810 --> 00:00:27,090
图像中空间结构的某些信息或某些像素模式的信息。

8
00:00:27,090 --> 00:00:33,390
现在，我们要做的当然是使用此输入向量作为经典人工模型的输入层

9
00:00:33,390 --> 00:00:38,820
神经网络，因为我们看到的经典的人工神经网络可以很好地分类为

10
00:00:38,820 --> 00:00:44,940
非线性问题，并且由于图像分类很好地解决了非线性问题，因此可以很好地完成工作

11
00:00:44,940 --> 00:00:50,440
这里对图像进行分类，并告诉每个图像是猫还是狗的图像。

12
00:00:50,670 --> 00:00:55,590
所以现在，既然我们已经有了输入层，那么剩下要做的唯一一件事就是创建

13
00:00:55,770 --> 00:00:59,030
隐藏层，我们称为完全连接层。

14
00:00:59,160 --> 00:01:04,110
因此，我们将完全按照之前构建经典的人工神经网络时所做的那样进行操作

15
00:01:04,110 --> 00:01:09,630
部分，然后我们需要添加仅由一个节点组成的输出层，因为这是一个二进制文件

16
00:01:09,630 --> 00:01:15,010
结果是猫还是狗，并说我们会像上一节中那样做。

17
00:01:15,150 --> 00:01:16,110
因此，让我们开始吧。

18
00:01:16,110 --> 00:01:20,840
我们将首先添加隐藏层，即完全连接的层。

19
00:01:20,900 --> 00:01:30,320
再次，我们以分类器为基础，然后在括号中使用ad方法

20
00:01:30,630 --> 00:01:32,400
然后记住我们要做的。

21
00:01:32,400 --> 00:01:38,730
我们需要使用密集函数，即用于添加完全连接层的函数。

22
00:01:38,940 --> 00:01:40,920
父，这又是。

23
00:01:41,070 --> 00:01:47,080
现在，请记住，我们需要在此处输入的第一个参数开始。

24
00:01:47,220 --> 00:01:54,840
下划线，然后等于，然后现在记住此输出参数是

25
00:01:54,840 --> 00:01:55,950
隐藏层。

26
00:01:55,950 --> 00:02:00,150
因此，现在又有一个大问题，我们需要在此处输入多少个节点。

27
00:02:00,180 --> 00:02:05,340
因此，请记住，在上一节中，我们看到选择多个节点没有经验法则

28
00:02:05,340 --> 00:02:06,410
在欣娜层。

29
00:02:06,510 --> 00:02:11,700
但是我们看到，通常会导致良好结果的常见做法是选择一个数字

30
00:02:11,700 --> 00:02:15,980
输入节点数和输出节点数之间的隐藏节点数。

31
00:02:16,170 --> 00:02:22,770
所以这里有大量的输入节点，因为您知道我们建立了32个特征图，每个特征图都包含

32
00:02:22,770 --> 00:02:23,680
许多细胞。

33
00:02:23,700 --> 00:02:28,570
因此，即使那样，我们也应用最大池化来减少特征图的大小并将其除以二。

34
00:02:28,710 --> 00:02:33,480
好吧，当我们继续展平以将特征图的所有像元放入这一单个

35
00:02:33,480 --> 00:02:38,930
向量是完全连接层的输入层，最后我们得到了很多输入节点。

36
00:02:39,210 --> 00:02:44,730
所以我们现在不打算全部计算它们，我们只知道我们不应该取太少的数字

37
00:02:45,000 --> 00:02:48,310
因此，我们将在这里选择128。

38
00:02:48,360 --> 00:02:53,010
请记住，数字的选择是实验产生的，我们需要选择一个数字

39
00:02:53,010 --> 00:02:58,380
不能太小而不能使分类器成为一个好的模型，也不能太大而不能使其高度计算

40
00:02:58,380 --> 00:03:00,930
密集的，因此我们需要进行实验。

41
00:03:01,080 --> 00:03:07,440
但是通过对该输出参数进行实验，我们意识到大约100的数字是一个不错的选择。

42
00:03:07,500 --> 00:03:11,840
我们本可以选择100，但是通常的做法是选择2的幂。

43
00:03:12,180 --> 00:03:16,440
因此，我们将在隐藏层中使用这128个隐藏节点。

44
00:03:16,590 --> 00:03:19,280
现在让我们进入第二个也是最后一个参数。

45
00:03:19,300 --> 00:03:25,100
我们需要输入该Den的函数，以将该完全连接的层添加为隐藏层。

46
00:03:25,230 --> 00:03:33,360
第二个参数当然是激活函数，因为该隐藏层中的节点

47
00:03:33,360 --> 00:03:38,940
我们添加的就像神经元，我们需要根据它们可以传递多少来激活

48
00:03:38,940 --> 00:03:39,630
信号。

49
00:03:39,660 --> 00:03:44,670
这取决于他们对最终投票的贡献有多重要

50
00:03:44,790 --> 00:03:46,310
受保护的类别。

51
00:03:46,380 --> 00:03:52,050
就像在美国一样，因为这是隐藏层，所以我们将使用的激活功能

52
00:03:52,050 --> 00:03:59,260
被称为整流器的整流器激活功能，也就是添加到完全连接的功能

53
00:03:59,290 --> 00:04:05,560
层是CNN中的隐藏层，然后我们现在需要添加的最后一层是输出

54
00:04:05,560 --> 00:04:06,130
层。

55
00:04:06,330 --> 00:04:12,650
为了有效地添加此输出层，我们需要在此处复制以下粘贴的内容。

56
00:04:12,760 --> 00:04:18,020
现在我们只需要更改输出它们的值和激活函数，因为现在

57
00:04:18,040 --> 00:04:23,160
不使用整流器激活函数返回每个类别的概率。

58
00:04:23,170 --> 00:04:26,370
现在将是S型函数。

59
00:04:26,410 --> 00:04:30,160
请记住，这是S形函数，因为我们有二进制结果。

60
00:04:30,160 --> 00:04:31,200
猫或狗。

61
00:04:31,360 --> 00:04:33,800
如果我们的结果涉及两个以上类别。

62
00:04:33,970 --> 00:04:36,730
好吧，我们需要使用Max软件激活功能。

63
00:04:36,850 --> 00:04:38,320
在这里，我们有一个二进制结果。

64
00:04:38,320 --> 00:04:41,830
因此它是乙状结肠激活功能。

65
00:04:41,830 --> 00:04:42,560
完善。

66
00:04:42,580 --> 00:04:44,380
都对激活功能有好处。

67
00:04:44,470 --> 00:04:50,020
现在，您当然不能忘记更改输出参数，因为我们当然不希望这样

68
00:04:50,300 --> 00:04:52,900
上层有128个节点。

69
00:04:52,990 --> 00:04:58,990
我们只是期望一个音符将成为一类和该类的预测概率

70
00:04:58,990 --> 00:05:01,000
可以是狗或猫。

71
00:05:01,360 --> 00:05:04,240
因此，让我们将128替换为1。

72
00:05:04,240 --> 00:05:05,010
开始了。

73
00:05:05,050 --> 00:05:06,210
现在完成了。

74
00:05:06,310 --> 00:05:11,050
完整连接步骤已经完成，因为此完整连接步骤仅包括添加

75
00:05:11,050 --> 00:05:12,100
完全连接的层。

76
00:05:12,100 --> 00:05:13,310
那是藏在那里的。

77
00:05:13,390 --> 00:05:16,810
然后外层得到最终的预测。

78
00:05:16,840 --> 00:05:22,680
现在我们可以在这里选择这两行并执行了。

79
00:05:22,840 --> 00:05:26,150
现在我们开始完整的连接步骤。

80
00:05:26,150 --> 00:05:31,440
现在，最终我们所有的层都正确地添加到了卷积神经网络中。

81
00:05:31,840 --> 00:05:35,370
现在让我们快速浏览一下我们创建的内容。

82
00:05:35,620 --> 00:05:36,380
这里是。

83
00:05:36,460 --> 00:05:42,090
那是我们通过这四个步骤构建的两个美丽的卷积神经网络。

84
00:05:42,100 --> 00:05:43,510
恭喜你

85
00:05:43,600 --> 00:05:48,940
当我们记得在第二部分中建立的回归模型中的第一个简单模型时，我们做了很多

86
00:05:48,940 --> 00:05:49,990
在这里进步。

87
00:05:50,380 --> 00:05:55,150
所以现在我们只需要编译整个模型，这就是我们在下一个教程中将要做的。

88
00:05:55,180 --> 00:05:56,740
在此之前，请享受机器学习。

