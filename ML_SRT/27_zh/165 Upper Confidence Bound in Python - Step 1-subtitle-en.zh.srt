1
00:00:00,270 --> 00:00:02,520
您好，欢迎来到本Python教程。

2
00:00:02,670 --> 00:00:08,010
因此，今天我们开始了机器学习的一个新分支，即强化学习，这就是

3
00:00:08,010 --> 00:00:14,340
让我们更接近人工智能领域，因为机器人和人工智能

4
00:00:14,340 --> 00:00:18,210
它附带的部分内容是通过强化学习构建的。

5
00:00:18,480 --> 00:00:23,700
因此，为了防止在下一个教程中出现任何失望，我们不会构建任何机器人，但是我们会

6
00:00:23,700 --> 00:00:29,460
将解决一个非常有趣的问题，称为多格式Bendit问题，我们将

7
00:00:29,460 --> 00:00:32,780
用两种最受欢迎​​的算法来解决这个问题。

8
00:00:32,790 --> 00:00:36,720
这些是置信上限，并且是汤普森算法。

9
00:00:36,720 --> 00:00:41,910
因此，我们今天将从置信区间上限开始，我们将在

10
00:00:41,910 --> 00:00:47,790
Python和R，在本第一个教程中，我们将导入数据集并解释

11
00:00:47,790 --> 00:00:48,530
问题是。

12
00:00:48,570 --> 00:00:52,500
那就是我们将解释乘数和问题所在。

13
00:00:52,500 --> 00:00:54,390
因此，让我们从基础开始。

14
00:00:54,390 --> 00:01:00,060
让我们转到此处的福特资源管理器为它们的工作目录设置权限，然后转到

15
00:01:00,060 --> 00:01:07,240
机或文件夹，然后进行第6部分的强化学习和第32节或关于UCB的预会。

16
00:01:07,440 --> 00:01:08,310
好吧。

17
00:01:08,310 --> 00:01:14,070
现在，在此文件夹中，确保您具有添加城市优化城市Rs4点击率

18
00:01:14,070 --> 00:01:20,540
因此，我们将尝试优化投放的广告中不同用户的点击率

19
00:01:20,540 --> 00:01:23,970
一个社交网络，因此这就是我们数据集的名称。

20
00:01:23,970 --> 00:01:24,710
是。

21
00:01:24,990 --> 00:01:30,540
因此，如果您有此数据集，现在可以单击此处的小按钮来设置文件夹

22
00:01:30,570 --> 00:01:31,830
作为工作目录。

23
00:01:32,130 --> 00:01:32,510
好。

24
00:01:32,580 --> 00:01:38,240
现在，我们将导入数据集，并像往常一样使用Spender。

25
00:01:38,280 --> 00:01:45,040
因此，我们将首先在此处执行此代码部分，以导入我们要为其创建库的库。

26
00:01:45,150 --> 00:01:47,140
现在，让我们导入数据集。

27
00:01:47,160 --> 00:01:54,540
因此，像往常一样，我们将对数据集数据集进行调用或使其无效，然后等于PD取

28
00:01:54,540 --> 00:01:59,450
Pendens库在我们这里读下划线。

29
00:01:59,580 --> 00:02:05,530
然后在括号中，我们只需要在引号中添加数据集的名称。

30
00:02:05,550 --> 00:02:14,720
所以就在这里，它是将下划线城市添加到zation。

31
00:02:14,730 --> 00:02:15,360
开始了。

32
00:02:15,570 --> 00:02:18,570
而且，我们不要忘记将视点视为终点。

33
00:02:18,780 --> 00:02:20,810
现在很少导入该数据集。

34
00:02:20,820 --> 00:02:26,240
因此，让我们选择该行，然后执行数据集将其导入。

35
00:02:26,240 --> 00:02:32,580
因此，现在让我们看更多，我们将通过双击此处的该集来对其进行浏览。

36
00:02:32,580 --> 00:02:33,040
开始了。

37
00:02:33,090 --> 00:02:34,560
这就是数据集。

38
00:02:34,760 --> 00:02:39,500
让我们看一点，因为确实有10个添加项。

39
00:02:39,840 --> 00:02:42,970
那么这些都是零。

40
00:02:43,110 --> 00:02:43,490
好。

41
00:02:43,530 --> 00:02:50,070
因此，请记住第3点分类，我们处理的问题包括分类和定位

42
00:02:50,070 --> 00:02:51,840
社交网络上的用户。

43
00:02:51,930 --> 00:02:56,910
对于一些核心的公司营销活动，请记住我们有这个社交网络的商业客户

44
00:02:56,910 --> 00:03:02,490
将广告投放到社交网络上，然后我们对这些分类进行了分类，以针对用户

45
00:03:02,490 --> 00:03:08,670
在社交网络上最有可能购买该汽车公司推出的这款全新豪华SUV

46
00:03:08,670 --> 00:03:15,900
非常低的价格，基本上是为了准备这次营销活动，这家汽车公司准备了一个广告，

47
00:03:15,900 --> 00:03:17,760
他们会穿上社交网络。

48
00:03:17,970 --> 00:03:22,650
发生的事情是，营销部准备了同一广告的一些不同版本

49
00:03:22,950 --> 00:03:28,410
您知道将汽车放置在不同的场景中，例如，一个广告使汽车行驶在美丽的道路上

50
00:03:28,770 --> 00:03:33,810
在另一版广告中，汽车在山上，也许在另一版中，汽车在山上

51
00:03:33,810 --> 00:03:34,400
桥。

52
00:03:34,560 --> 00:03:40,740
好的，市场部准备了同一广告的不同版本，并将它们放在

53
00:03:40,740 --> 00:03:41,800
社交网络。

54
00:03:42,030 --> 00:03:50,070
但是问题在于，他们准备了该广告的10个出色版本，以及该广告外观的10个版本

55
00:03:50,220 --> 00:03:51,060
大。

56
00:03:51,060 --> 00:03:55,610
因此，他们实际上不太确定要在社交网络上投放哪个广告。

57
00:03:55,680 --> 00:03:58,860
他们想投放将获得最大点击次数的广告。

58
00:03:58,940 --> 00:04:01,310
您知道，因此大多数用户都购买SUV。

59
00:04:01,470 --> 00:04:05,630
因此，他们需要投放能够带来最佳转化率的广告。

60
00:04:05,640 --> 00:04:11,880
所以这家公司所做的是，他们聘请我们担任数据科学家，他们说好，我有10个版本

61
00:04:11,880 --> 00:04:12,690
广告的

62
00:04:12,780 --> 00:04:17,460
我们将广告投放到社交网络上的预算有限，因为将这些广告投放到社交网络上

63
00:04:17,460 --> 00:04:18,790
网络要花钱。

64
00:04:18,930 --> 00:04:25,170
因此，这家公司希望我们的数据科学家找到最佳策略，以便快速找出

65
00:04:25,170 --> 00:04:31,740
此广告的版本最适合用户，即哪个版本的广告可以将我们带到最高

66
00:04:31,830 --> 00:04:32,600
兑换率。

67
00:04:32,610 --> 00:04:33,820
那是城市。

68
00:04:33,900 --> 00:04:35,420
那就是点击率。

69
00:04:35,520 --> 00:04:39,020
我们希望找到点击次数最多的广告。

70
00:04:39,060 --> 00:04:44,160
因此，现在说到这一点，我们就可以知道我们将要做的事情之间的主要区别

71
00:04:44,160 --> 00:04:51,120
现在以及我们之前所做的事情，因为之前我们有一个数据集，其中某些数据包含独立的

72
00:04:51,120 --> 00:04:53,250
变量和一个因变量。

73
00:04:53,400 --> 00:04:59,190
然后我们进行了一些聚类，其中只有自变量，现在情况有所不同。

74
00:04:59,370 --> 00:05:01,580
我们从没有数据开始。

75
00:05:01,790 --> 00:05:07,250
我知道我们面前有一些数据集，但这只是用于仿真的数据集，因为会发生什么

76
00:05:07,250 --> 00:05:08,050
在真实生活中。

77
00:05:08,090 --> 00:05:09,890
我们将假装我们生活在现实中。

78
00:05:09,890 --> 00:05:12,750
我们将假装我们还没有任何数据。

79
00:05:12,980 --> 00:05:17,930
嗯，在现实生活中发生的事情是，我们将开始对此进行实验并通过放置

80
00:05:17,930 --> 00:05:23,690
他们在社交网络上使用不同版本的广告，并根据我们观察到的结果

81
00:05:23,690 --> 00:05:27,810
将改变我们将这些广告投放到社交网络上的策略。

82
00:05:27,950 --> 00:05:30,830
因此，这是该过程的不同步骤。

83
00:05:30,830 --> 00:05:39,310
我们有十个版本的同一个版本，其中十个版本试图销售这款便宜的豪华SUV。

84
00:05:39,560 --> 00:05:46,040
每次社交网络用户登录到他的帐户时，我们都会放置一个版本

85
00:05:46,040 --> 00:05:51,220
10个广告，并且这将在用户每次连接到其帐户时进行。

86
00:05:51,230 --> 00:05:57,560
我们将向他展示广告的一个版本，例如广告的3个版本3。

87
00:05:57,650 --> 00:06:00,310
用户点击广告后的响应。

88
00:06:00,350 --> 00:06:02,650
我们获得等于1的奖励。

89
00:06:02,870 --> 00:06:07,230
如果用户不点击广告，我们将获得等于零的奖励。

90
00:06:07,400 --> 00:06:12,030
我们将为此社交网络上的1万名用户执行此操作。

91
00:06:12,080 --> 00:06:14,350
我们将向10000个用户展示广告。

92
00:06:14,510 --> 00:06:19,790
我们将观察用户是否点击广告上的是或否。

93
00:06:19,790 --> 00:06:26,290
给我们一个奖励，如果用户不点击会给我们零的广告，我们就会

94
00:06:26,300 --> 00:06:30,730
不会显示我们选择或随机显示的不同版本的广告。

95
00:06:30,740 --> 00:06:34,020
将有一个特定的策略来做到这一点。

96
00:06:34,040 --> 00:06:40,240
了解强化学习的关键是，该策略将取决于每个人

97
00:06:40,240 --> 00:06:45,350
回合我们在前几轮所观察到的先前结果。

98
00:06:45,350 --> 00:06:47,880
举例来说，当我们大约10岁时

99
00:06:47,960 --> 00:06:52,460
幕后发生的事情是该算法将查看观察到的不同结果

100
00:06:52,520 --> 00:06:58,760
在前十轮中，根据这些结果，我们将决定将使用哪个广告版本

101
00:06:58,760 --> 00:07:00,290
向用户展示。

102
00:07:00,290 --> 00:07:05,470
因此，强化学习也称为在线学习或交互式学习。

103
00:07:05,630 --> 00:07:10,130
由于该策略是动态的，因此取决于实验开始时的观察结果

104
00:07:10,490 --> 00:07:11,930
到现在为止。

105
00:07:12,230 --> 00:07:13,910
那么现在是什么数据集。

106
00:07:13,970 --> 00:07:19,250
这只是对我们向用户展示广告时发生的情况的某种模拟。

107
00:07:19,250 --> 00:07:25,520
换句话说，这是上帝所知道的，因为我们不知道每个用户要点击哪个广告

108
00:07:25,520 --> 00:07:25,900
上。

109
00:07:26,120 --> 00:07:31,430
数据集告诉我们的是，这是针对每个用户连接的每一轮

110
00:07:31,430 --> 00:07:35,390
到他要在哪个版本的用户上点击的帐户。

111
00:07:35,390 --> 00:07:40,010
因此，让我们举一个例子，让我们解释一下这五个第一用户的情况。

112
00:07:40,010 --> 00:07:42,020
因此，让我们将第一个用户索引为零。

113
00:07:42,020 --> 00:07:43,120
那是第一个用户。

114
00:07:43,130 --> 00:07:44,430
那是第一轮。

115
00:07:44,600 --> 00:07:50,000
并且根据模拟或根据上帝，社交网络的第一位用户将

116
00:07:50,000 --> 00:07:52,820
如果我们向他展示第一个版本，请点击广告。

117
00:07:52,940 --> 00:07:59,030
第五版和第九版，如果我们向他展示第二版，第三版，第四版

118
00:07:59,030 --> 00:08:02,800
版本6 7 8或第十个版本。

119
00:08:02,900 --> 00:08:05,830
那么这个用户不会点击应用程序。

120
00:08:06,020 --> 00:08:07,670
这就是上帝所知道的。

121
00:08:07,820 --> 00:08:13,320
但是就我们而言，我们不知道该用户将点击哪个。

122
00:08:13,550 --> 00:08:14,940
那么第二位用户呢。

123
00:08:14,990 --> 00:08:20,120
因此，这是第二轮的第二轮，我们展示了该广告的另一个版本，并根据上帝的

124
00:08:20,120 --> 00:08:25,520
说实话，第二个用户只有在向他展示第九个版本时才会点击广告。

125
00:08:25,520 --> 00:08:29,090
第三位用户绝不会点击添加我们显示的任何版本。

126
00:08:29,150 --> 00:08:35,120
第四个用户将仅单击第二个版本和第8个版本，而第五个用户将永远不会单击

127
00:08:35,120 --> 00:08:35,930
点击广告。

128
00:08:35,960 --> 00:08:38,000
无论我们向他展示什么版本。

129
00:08:38,000 --> 00:08:40,040
好的，这就是问题的主意。

130
00:08:40,040 --> 00:08:45,590
因此，我们将构建UCB算法和Tompson something算法这两种算法，

131
00:08:45,590 --> 00:08:51,650
这些算法将从此处决定向用户展示哪个版本的广告。

132
00:08:51,650 --> 00:08:57,050
根据用户获得的奖励，当用户点击广告或

133
00:08:57,050 --> 00:09:02,440
如果用户未点击广告，则我们的字词等于零，它将决定向用户展示哪个广告

134
00:09:02,450 --> 00:09:03,360
下回合。

135
00:09:03,500 --> 00:09:10,640
根据之前的观察，如果我们在这里走下去，我们将有10000发子弹

136
00:09:10,640 --> 00:09:13,750
可以看到我们正在向10000个用户展示广告。

137
00:09:13,970 --> 00:09:18,610
因此，当然，算法的目标是使总奖励最大化。

138
00:09:18,680 --> 00:09:24,020
那是所有不同奖励的总和，以及通过不同选择获得的每一轮

139
00:09:24,020 --> 00:09:24,780
广告。

140
00:09:25,040 --> 00:09:26,450
好，让我们开始吧。

141
00:09:26,450 --> 00:09:30,490
让我们从对UCB算法的较高置信度开始。

142
00:09:30,620 --> 00:09:35,690
但是在我们开始实现该算法之前，我想向您展示一些我想展示的东西

143
00:09:35,690 --> 00:09:42,530
如果您不知道算法，我们随机选择每个Troung广告的版本会发生什么

144
00:09:42,620 --> 00:09:43,850
没有策略。

145
00:09:43,850 --> 00:09:50,820
每次用户连接到其帐户时，我们都会随机显示这十个版本中的一个。

146
00:09:50,840 --> 00:09:54,070
所以我实际上准备了这个算法。

147
00:09:54,080 --> 00:09:59,120
我们不会一起实现，因为该算法实际上与

148
00:09:59,120 --> 00:10:05,530
为您提供了在下一个教程中将实现的大部分功能，但实际上已提供了该算法

149
00:10:05,650 --> 00:10:11,160
在文件夹中，您将看到是该文件的随机选择，然后您将获得研讨会。

150
00:10:11,170 --> 00:10:14,750
实际上，我在这里预先审查了该算法。

151
00:10:14,770 --> 00:10:18,430
如您所见，我在这里将此算法称为随机选择。

152
00:10:18,460 --> 00:10:22,660
我要按照我们刚才所说的那样输入日期，所以我不需要再次执行该操作。

153
00:10:22,690 --> 00:10:29,060
在本节中，我将威胁随机选择算法，该算法仅包括选择

154
00:10:29,060 --> 00:10:34,510
广告的一个随机版本以及用户每次在其社交网络上进行连接的每一轮

155
00:10:34,510 --> 00:10:35,300
帐户。

156
00:10:35,590 --> 00:10:38,590
因此，我将立即执行本节。

157
00:10:39,070 --> 00:10:40,970
因此，这里实现得很好。

158
00:10:41,140 --> 00:10:45,880
现在，如果我们进行变量探索，我们可以看到该算法的不同结果。

159
00:10:45,880 --> 00:10:52,180
所以最重要的结果是总数我们希望这个变量是不同的总和

160
00:10:52,180 --> 00:10:56,570
奖励最高到10000个用户的最后一轮。

161
00:10:56,650 --> 00:11:02,090
因此，总奖励是1246。

162
00:11:02,290 --> 00:11:08,350
所以发生的是，随机选择算法可以在每个回合中随机选择每个

163
00:11:08,350 --> 00:11:14,530
实际上看到了这个选定列表中的随机选择，因此我们可以清楚地看到地面发生了什么

164
00:11:14,530 --> 00:11:20,200
对于第一个用户为零，则随机选择算法为第二个用户选择了版本号

165
00:11:20,200 --> 00:11:21,630
四舍五入版本号6。

166
00:11:21,730 --> 00:11:24,680
然后在第三个版本中，版本号1然后是版本0。

167
00:11:24,700 --> 00:11:32,410
嗯，这是因为索引指向0，但这是第一个版本，然后是版本4 5 0 8，即

168
00:11:32,410 --> 00:11:33,470
随机选择。

169
00:11:33,490 --> 00:11:39,970
因此，根据上帝的真实结果，每一轮广告的选择都会产生回报。

170
00:11:40,150 --> 00:11:45,420
因此，在第一轮首次使用连接并计算随机选择算法时就选择了

171
00:11:45,420 --> 00:11:47,260
四号。

172
00:11:47,260 --> 00:11:47,970
小心点

173
00:11:47,980 --> 00:11:48,830
那就是索引。

174
00:11:48,820 --> 00:11:53,960
那实际上是第五位，我们可以看到第五位是1。

175
00:11:53,980 --> 00:12:00,280
因此，这意味着首次使用者点击了由随机选择算法选择的第一个版本

176
00:12:00,280 --> 00:12:03,700
因此，随机选择算法很幸运。

177
00:12:03,820 --> 00:12:09,130
但是，如果我们为第二个用户查看第二轮，则随机选择算法的编号为

178
00:12:09,130 --> 00:12:09,820
7。

179
00:12:10,090 --> 00:12:16,450
不幸的是，根据上帝的真相，第二位用户没有点击

180
00:12:16,450 --> 00:12:16,840
应用程式。

181
00:12:17,080 --> 00:12:21,990
因此，在这里我们得到零奖励，而在第一轮中我们得到的不是。

182
00:12:22,060 --> 00:12:23,970
但是在第二轮，我们得到零。

183
00:12:23,980 --> 00:12:30,640
我们希望我们在这里观察到的总奖励实际上是它获得的所有奖励的总和

184
00:12:30,640 --> 00:12:35,130
在10000回合结束时为0或1。

185
00:12:35,140 --> 00:12:35,440
好吧。

186
00:12:35,440 --> 00:12:41,650
因此，要记住的有趣一点是，当我们随机选择广告时，我们会得到

187
00:12:41,650 --> 00:12:43,590
1246。

188
00:12:43,690 --> 00:12:48,790
您知道这是一个随机因素，因为我们正在使用此随机范围函数。

189
00:12:48,850 --> 00:12:55,540
因此，如果我们再次选择该选项，我们将得到另一个单词，但这将非常接近此值

190
00:12:55,540 --> 00:12:56,140
这里。

191
00:12:56,170 --> 00:12:57,990
我要再做一次。

192
00:12:58,240 --> 00:13:03,610
如您所见，我们得到1166，我什至可以再做一次。

193
00:13:03,710 --> 00:13:09,070
1193我又得到1237。

194
00:13:09,100 --> 00:13:14,360
因此，我们总可获得接近1200的总奖励。

195
00:13:14,590 --> 00:13:21,740
因此，让我们始终牢记解决这个问题，因为然后将其与我们获得的总回报进行比较。

196
00:13:21,760 --> 00:13:27,790
得益于我们更先进的算法，该算法具有较高的置信度，然后进行了Tomsen采样

197
00:13:27,820 --> 00:13:28,960
算法。

198
00:13:28,960 --> 00:13:34,490
那么1200让我们看看UCAP和Tompson是如何击败它的。

199
00:13:34,600 --> 00:13:39,280
现在，向您展示我们在本课程中实现的每种算法的最后一件事

200
00:13:39,280 --> 00:13:42,100
最后令人兴奋的一步是可视化结果。

201
00:13:42,310 --> 00:13:49,000
在本部分的强化学习中，结果的可视化将包括可视化

202
00:13:49,000 --> 00:13:53,800
直方图，我们可以看到蝙蝠不同版本的不同选择。

203
00:13:53,830 --> 00:13:57,960
因此，我将向您展示我们的随机选择算法发生了什么。

204
00:13:58,030 --> 00:14:01,580
让我们按命令或控制我们并执行它。

205
00:14:01,660 --> 00:14:02,770
现在我们开始。

206
00:14:02,830 --> 00:14:08,610
当然，由于我们的算法会在每个回合中随机选择不同版本的广告。

207
00:14:08,710 --> 00:14:15,640
好吧，当然，我们得到了10种不同版本的广告的几乎相同的分布

208
00:14:15,640 --> 00:14:19,930
选择的广告版本大致相同的次数。

209
00:14:19,930 --> 00:14:20,280
好吧。

210
00:14:20,290 --> 00:14:28,240
因此，这只是给您一些额外的动力，现在是时候让您成为专业人士了，让我们回到我们的UCB

211
00:14:28,240 --> 00:14:30,970
算法并开始实施。

212
00:14:30,970 --> 00:14:35,680
因此，请记住我们总共使用了1200个随机选择算法。

213
00:14:35,740 --> 00:14:40,040
让我们看看您如何看待节拍，以便我们在下一个教程中找到。

214
00:14:40,040 --> 00:14:41,770
直到那时，机器学习

