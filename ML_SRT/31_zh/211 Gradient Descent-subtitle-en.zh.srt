1
00:00:00,680 --> 00:00:05,570
您好，欢迎回到今天讨论梯度的深度学习课程

2
00:00:05,600 --> 00:00:06,600
下降。

3
00:00:06,890 --> 00:00:13,610
我们先前了解到的是，为了让神经网络了解需要发生的事情，

4
00:00:13,610 --> 00:00:21,140
传播，即当误差为y hat之间的差或平方差的总和时

5
00:00:21,170 --> 00:00:28,300
Y通过神经网络反向传播，并相应地调整权重。

6
00:00:28,520 --> 00:00:34,220
所以我们看到了，今天我们将确切学习如何调整这些权重。

7
00:00:34,400 --> 00:00:35,930
让我们来看一下。

8
00:00:36,080 --> 00:00:44,030
这是神经工作的非常简单的版本，感知Trauner单字母前馈神经

9
00:00:44,030 --> 00:00:52,280
网络，我们在这里可以看到整个过程都在进行中，然后我们有了一些输入值

10
00:00:52,280 --> 00:00:57,000
我们必须等待，然后应用激活功能。

11
00:00:56,990 --> 00:01:01,850
我们得到一个帽子，然后将其与实际值进行比较，以计算成本函数。

12
00:01:01,850 --> 00:01:05,420
那么如何才能使成本函数最小化。

13
00:01:05,420 --> 00:01:07,370
我们对于它可以做些什么呢。

14
00:01:07,370 --> 00:01:14,750
做到这一点的一种方法是蛮力方法，在这种方法中，我们会采取所有可能的方法

15
00:01:14,750 --> 00:01:20,990
权重并查看它们，看看哪一个看起来最合适，我们要做的就是例如尝试

16
00:01:21,080 --> 00:01:26,240
比方说，例如一千个砝码，我们将对其进行尝试，将得到类似的结果

17
00:01:26,810 --> 00:01:32,900
成本函数，这是交叉功能的Y轴上的图表，

18
00:01:32,900 --> 00:01:34,770
y的水平轴。

19
00:01:34,860 --> 00:01:39,200
而且因为您可以看到我的公式减去Y平方。

20
00:01:39,230 --> 00:01:42,470
这就是成本函数的样子。

21
00:01:42,670 --> 00:01:47,830
基本上，您会找到最好的一个。

22
00:01:47,950 --> 00:01:50,980
所以非常简单非常直观的方法。

23
00:01:50,980 --> 00:01:53,200
为什么不使用这种蛮力方法。

24
00:01:53,200 --> 00:02:01,630
为什么不为一千种不同的参数或权重输入尝试一千种不同的成本

25
00:02:01,690 --> 00:02:03,030
并查看哪个效果最好。

26
00:02:03,030 --> 00:02:04,230
您将以这种方式找到最好的一种。

27
00:02:04,420 --> 00:02:10,270
好吧，如果您只有一种优化方法可能会奏效，但是随着权重的增加

28
00:02:10,480 --> 00:02:16,630
增加网络中Synopsys的数量，您必须面对维度的诅咒。

29
00:02:16,630 --> 00:02:19,370
那么，维数的原因是什么。

30
00:02:19,450 --> 00:02:24,510
描述或解释它的最好方法就是看一个实际的例子。

31
00:02:24,640 --> 00:02:30,610
因此，请记住我们在谈论神经网络如何实际工作时所遇到的示例

32
00:02:30,610 --> 00:02:37,120
正在建立或运行神经网络进行财产评估。

33
00:02:37,120 --> 00:02:43,030
所以这就是当它已经被很好地训练时的样子，而在它尚未被训练之前

34
00:02:43,030 --> 00:02:45,290
在我们知道哪一个砝码之前接受过培训。

35
00:02:45,550 --> 00:02:47,640
实际的神经网络看起来像这样。

36
00:02:47,730 --> 00:02:54,860
是的，因为我们拥有所有这些可能的概要，并且我们仍然必须提高权重

37
00:02:55,280 --> 00:03:01,190
在这里，我们总共有25个权重，所以开始时是5倍，有4倍，从命中中又有5个

38
00:03:01,310 --> 00:03:03,430
总共有25个重量。

39
00:03:03,680 --> 00:03:09,060
让我们看看我们如何可能用25种方式强行使用。

40
00:03:09,070 --> 00:03:12,610
这是一个非常简单的神经网络。

41
00:03:12,620 --> 00:03:20,630
很简单，只有一个命中，我们如何通过这种神经网络来蛮力

42
00:03:20,630 --> 00:03:21,320
尺寸。

43
00:03:21,320 --> 00:03:24,370
好吧，这里有一些简单的数学计算。

44
00:03:24,410 --> 00:03:25,890
我们有25个砝码。

45
00:03:25,910 --> 00:03:30,410
因此，这意味着如果我们有一千种组合，我们将为每个权重求和

46
00:03:30,410 --> 00:03:37,790
组合的数量是1000乘以25的幂，或者是1000或10以解析任何五个不同的组合。

47
00:03:37,790 --> 00:03:48,260
现在，让我们看看截至2016年6月，Sun如何点亮世界上的Fosse超级计算机。

48
00:03:48,260 --> 00:03:49,700
它会解决这个问题吗？

49
00:03:49,700 --> 00:03:52,390
对，所以双威领带谁亮。

50
00:03:52,680 --> 00:04:00,980
看起来对于这台超级计算机来说，这几乎是一栋巨大的建筑，它使吉尼斯（Guinness）

51
00:04:01,310 --> 00:04:04,940
成为Fosses超级计算机的世界纪录。

52
00:04:05,210 --> 00:04:12,620
目前，它是世界上最快的超级计算机，并且绑扎灯可以以某种速度运行

53
00:04:12,620 --> 00:04:15,420
共有93人。

54
00:04:15,510 --> 00:04:19,900
翻盖代表每秒的浮动操作。

55
00:04:19,970 --> 00:04:23,310
这样就可以对动力油做九十三。

56
00:04:23,340 --> 00:04:28,010
每秒15次浮动操作的幂数的十倍。

57
00:04:28,100 --> 00:04:32,340
这就是比较的速度。

58
00:04:32,450 --> 00:04:38,210
目前，普通计算机的性能确实超过了几千兆字节，以此类推。

59
00:04:38,210 --> 00:04:41,320
所以它就像那些范围。

60
00:04:41,450 --> 00:04:44,290
小于TEI双威型照明灯。

61
00:04:44,390 --> 00:04:47,950
因此突然之间，这只是谎言，它在技术的最前沿。

62
00:04:48,360 --> 00:04:57,920
假设我们可以在您自己的网络上进行一个一测试四个测试的组合

63
00:04:58,010 --> 00:05:04,220
在一张软盘中执行一项不可能的浮动操作是不切实际的，因为您

64
00:05:04,220 --> 00:05:09,470
需要多个浮动操作来测试您自己的一点重量。

65
00:05:09,480 --> 00:05:11,270
但是，即使让我们先入为主。

66
00:05:11,270 --> 00:05:17,990
假设它可以在理想世界中做到，可以在一次浮动操作中做到

67
00:05:18,290 --> 00:05:19,900
每一项浮动操作进行测试。

68
00:05:20,120 --> 00:05:23,970
这意味着Doddridge仍然需要趋向于任何五个。

69
00:05:24,080 --> 00:05:33,080
用93乘以10到大约15秒来进行所有这些测试以蛮力

70
00:05:33,080 --> 00:05:34,120
通过该网络。

71
00:05:34,130 --> 00:05:39,860
因此，这意味着一个或大约趋向于功率58秒，与趋向于功率相同

72
00:05:39,860 --> 00:05:42,120
50年

73
00:05:42,170 --> 00:05:49,910
这个数字比宇宙存在的时间还要长，而且绝对不会持续

74
00:05:49,910 --> 00:05:59,150
简而言之，这个数字是如此之大，以至于我们在优化过程中根本无法使用。

75
00:05:59,150 --> 00:06:00,020
所以我们去了。

76
00:06:00,140 --> 00:06:01,220
这是一个不。

77
00:06:01,220 --> 00:06:05,450
即使是世界上最快的超级计算机双威尾灯。

78
00:06:05,450 --> 00:06:10,140
因此，我们必须提出一种不同的方法来找到最佳重量。

79
00:06:10,310 --> 00:06:15,890
顺便说一下，我们的神经网络非常简单，如果神经网络看起来像什么呢？

80
00:06:15,890 --> 00:06:22,740
像这样，甚至比那个更大，是的，它根本不会发生。

81
00:06:22,760 --> 00:06:28,490
因此，要研究的方法称为梯度下降，您可能已经听说过。

82
00:06:28,580 --> 00:06:30,770
如果没有的话，我们将找出现在的情况。

83
00:06:30,840 --> 00:06:41,780
因此，有了我们的成本函数，现在我们来看看如何培养一种更快的查找方法

84
00:06:41,840 --> 00:06:43,190
最好的选择。

85
00:06:43,190 --> 00:06:45,920
因此，可以说我们从某个地方开始，而您将从某个地方开始。

86
00:06:45,920 --> 00:06:47,390
因此，我们从那里开始。

87
00:06:47,390 --> 00:06:56,990
从左上角的角度来看，我们要做的是看待我们的角度

88
00:06:56,990 --> 00:07:00,800
那时的成本函数，所以我们基本上将其称为梯度，因为您

89
00:07:00,800 --> 00:07:02,090
必须有所区别。

90
00:07:02,150 --> 00:07:04,190
我们将不讨论数学方程式。

91
00:07:04,250 --> 00:07:09,370
在下一堂课的结尾，我们将提供一些补充阅读的技巧。

92
00:07:09,740 --> 00:07:17,150
但是基本上，您只需要区分出特定点的斜率并找到

93
00:07:17,150 --> 00:07:19,330
斜率是正数还是负数。

94
00:07:19,450 --> 00:07:25,640
如果在这种情况下，如果坡度为负，则表示您正在下坡，因此右侧为

95
00:07:25,640 --> 00:07:27,350
下坡向左是上坡。

96
00:07:27,350 --> 00:07:29,780
从那里开始，这意味着您需要正确。

97
00:07:29,780 --> 00:07:31,510
基本上，您需要下坡。

98
00:07:31,670 --> 00:07:33,070
这就是我们要做的。

99
00:07:33,090 --> 00:07:35,510
动臂向右迈出了一步。

100
00:07:35,510 --> 00:07:37,450
球再次滚落。

101
00:07:37,460 --> 00:07:38,300
一样。

102
00:07:38,390 --> 00:07:44,120
您计算斜率，并且该斜率是正值，这意味着作者的上坡向左下坡，您需要

103
00:07:44,120 --> 00:07:46,560
向左走，您的球就下来了。

104
00:07:46,790 --> 00:07:54,900
再次计算坡度，就可以找到所有的公牛，这样便可以找到

105
00:07:55,040 --> 00:08:04,520
简单来说，这就是找到最佳WAITES的最佳方式，可以最大程度地降低成本功能。

106
00:08:04,590 --> 00:08:08,970
当然，这不会像滚球一样是非常之字形的方法，但是

107
00:08:09,210 --> 00:08:14,970
将其视为滚滚球会更容易记住，或者更有趣。

108
00:08:14,970 --> 00:08:19,980
但实际上，是的，只是一步一步走，就像是曲折形

109
00:08:19,980 --> 00:08:21,920
方法。

110
00:08:22,050 --> 00:08:25,020
是的，还有很多其他要素。

111
00:08:25,050 --> 00:08:35,190
例如，为什么会这样，为什么它会下降，为什么它不会越线，所以

112
00:08:35,190 --> 00:08:40,740
它可能跳出了向上而不是向下的跳动之类的东西，所以有

113
00:08:40,740 --> 00:08:41,950
您可以调整的参数。

114
00:08:41,970 --> 00:08:45,570
再一次，我们将提到您可以在其中找到更多信息的地方。

115
00:08:45,580 --> 00:08:51,090
另外，我们将在实际应用中使用此功能，但是在最简单的直观方法中，这就是

116
00:08:51,090 --> 00:08:51,770
正在发生。

117
00:08:51,780 --> 00:08:56,670
我们通过了解我们应该走哪条路来走到底。

118
00:08:56,700 --> 00:09:01,890
而不是强加于千千万万亿万亿次

119
00:09:01,890 --> 00:09:02,920
的组合。

120
00:09:03,030 --> 00:09:09,920
我们每次都可以简单地看一下它在哪里倾斜，就像您一样

121
00:09:09,910 --> 00:09:11,690
或者您想象自己正站在小山上。

122
00:09:11,700 --> 00:09:15,870
它感觉下降的方向是哪种，下降的感觉是哪种，您只要保持

123
00:09:15,870 --> 00:09:20,760
沿着那种方式走，您喜欢走50步，然后再次评估，确定是哪种方式

124
00:09:21,090 --> 00:09:21,470
这条路。

125
00:09:21,500 --> 00:09:24,620
好的，我将采取50步或更少的步伐，以这种方式采取40步。

126
00:09:24,690 --> 00:09:28,160
因此，随着您越来越近，它变得越来越少。

127
00:09:28,530 --> 00:09:32,720
因此，这是在二维空间中应用梯度下降的示例。

128
00:09:32,720 --> 00:09:36,450
这就是一个一维的例子。

129
00:09:36,570 --> 00:09:41,880
在这里，我们有一个用于梯度下降的二维空间，您可以看到它越来越接近

130
00:09:41,970 --> 00:09:48,450
最小值，也称为梯度下降，因为您正在下降到最小值

131
00:09:48,480 --> 00:09:53,430
成本函数，发现他在三个维度上应用了梯度下降。

132
00:09:53,430 --> 00:09:58,740
如果您将其投影到两个维度上，就会看到它的曲折形状

133
00:09:58,740 --> 00:09:59,600
最低。

134
00:09:59,700 --> 00:10:03,810
因此，这就是Tauriel的梯度下降指数。我们将讨论随机的。

135
00:10:03,810 --> 00:10:06,850
梯度下降实际上是本教程的延续。

136
00:10:07,020 --> 00:10:08,720
我期待着在那里见到你。

137
00:10:08,740 --> 00:10:10,610
因此，下次享受深度学习。

