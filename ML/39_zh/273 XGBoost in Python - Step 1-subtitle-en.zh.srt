1
00:00:00,240 --> 00:00:05,820
您好，欢迎来到本Python教程，这是本课程最后一部分的感觉。

2
00:00:05,890 --> 00:00:12,060
这个关于前地理标志提升的奖金部分，我不得不祝贺您到达最后一个部分

3
00:00:12,060 --> 00:00:13,020
当然。

4
00:00:13,170 --> 00:00:18,120
那是一段漫长的旅程，我希望现在您能感觉到机器学习方面的专家，并且您非常

5
00:00:18,120 --> 00:00:24,360
对这个世界充满信心，并且您即将开始工作，或者也许您已经在从事一些令人着迷的工作

6
00:00:24,360 --> 00:00:25,930
机器学习项目。

7
00:00:26,180 --> 00:00:33,330
因此，您学到了很多东西，但是如果不进行一些介绍就退出本课程将是一个耻辱

8
00:00:33,330 --> 00:00:39,560
到机器学习中最流行的算法之一，该算法最近很流行，但仍然

9
00:00:39,570 --> 00:00:44,190
绝对是一个非常强大的模型，尤其是当您处理大型数据集时。

10
00:00:44,250 --> 00:00:48,170
它会在快速执行的同时为您提供非常高的性能。

11
00:00:48,390 --> 00:00:54,600
在谈到性能和执行速度时，重要的是要提醒您，前GI加速是最重要的。

12
00:00:54,600 --> 00:01:01,130
在模型性能和执行速度方面，梯度提升的强大实现。

13
00:01:01,170 --> 00:01:04,870
因此，将其包含在工具箱中对您而言非常重要。

14
00:01:05,070 --> 00:01:06,900
因此，让我们实施额外的提升。

15
00:01:06,900 --> 00:01:12,530
这只是一个介绍，因此我们将对实际上boost做一个简单的实现。

16
00:01:12,720 --> 00:01:18,450
但是您必须考虑一下计算机，然后才能尝试解决自己的问题。

17
00:01:18,450 --> 00:01:23,760
数据集，您将看到，即使通过这种简单的实现，它也一定会给您一些

18
00:01:23,820 --> 00:01:25,770
完美的表现。

19
00:01:25,770 --> 00:01:30,560
因此，要做的第一件事是安装ex-GI boost并将其与Spider集成。

20
00:01:30,690 --> 00:01:33,960
因此，我在这里为您准备了第一行注释。

21
00:01:33,960 --> 00:01:37,490
按照此链接上的说明安装额外的加速器。

22
00:01:37,560 --> 00:01:44,610
因此，让我们获取此链接并进入选定的副本，然后打开浏览器。

23
00:01:44,610 --> 00:01:49,760
在这里，让我们粘贴地址并输入。

24
00:01:49,950 --> 00:01:53,670
好的，这就是额外的增强功能的安装指南。

25
00:01:53,670 --> 00:02:00,240
因此，基本上很简单，您只需要打开一个终端并按照说明进行操作即可，只需复制

26
00:02:00,240 --> 00:02:04,770
粘贴本指南将告诉您输入的不同命令。

27
00:02:04,830 --> 00:02:10,180
所以我不会在终端上执行此操作，因为这取决于您使用的操作系统。

28
00:02:10,180 --> 00:02:16,930
您知道吗，无论您使用的是Linux OSX还是Windows，您只需要选择正确的链接即可。

29
00:02:16,950 --> 00:02:21,990
例如，我在OSX上，所以我只需单击此处，所以基本上我需要做的是

30
00:02:21,990 --> 00:02:22,950
说明。

31
00:02:23,160 --> 00:02:28,720
因此，我首先复制此副本，然后以这种方式打开终端。

32
00:02:28,740 --> 00:02:29,650
这里是。

33
00:02:29,880 --> 00:02:30,950
我刚刚粘贴。

34
00:02:31,020 --> 00:02:31,890
然后按回车键。

35
00:02:31,890 --> 00:02:37,650
我不会这样做，因为我的借口已经安装好了，但基本上只是为了告诉您

36
00:02:37,650 --> 00:02:42,170
您只需要仔细遵循说明即可正确安装所有组件。

37
00:02:43,180 --> 00:02:48,760
我只是告诉您要仔细阅读，因为您不必复制所有内容，因为其中之一

38
00:02:48,760 --> 00:02:54,130
这里的命令只是一些选项，值得一提的第二件事是

39
00:02:54,130 --> 00:02:59,230
仅针对OSX用户，您将需要在此处执行此行。

40
00:02:59,470 --> 00:03:02,340
对于我们来说，这要求您安装自制软件。

41
00:03:02,440 --> 00:03:08,020
因此，当您输入此命令后，我将很快向您展示如何立即安装它。

42
00:03:08,110 --> 00:03:09,820
这可能需要30分钟。

43
00:03:09,970 --> 00:03:11,130
因此，请做好准备。

44
00:03:11,230 --> 00:03:12,480
这是完全正常的。

45
00:03:12,520 --> 00:03:18,430
它只会配置您的Pre-GI增强版的Prete安装，确实需要花费一些时间，但

46
00:03:18,580 --> 00:03:23,820
这是值得做的，因为正如我告诉您的那样，额外的提升是我们工具中的出色算法

47
00:03:23,820 --> 00:03:24,830
套件。

48
00:03:24,850 --> 00:03:29,400
好的，所以只是对如何安装自制软件的简要说明。

49
00:03:29,410 --> 00:03:34,030
因此，基本上，您只需打开一个新标签即可在此处输入。

50
00:03:34,190 --> 00:03:39,880
这样就可以自制，然后进入第一个链接。

51
00:03:39,990 --> 00:03:43,070
为Anchoress自制失踪的包裹经理。

52
00:03:43,070 --> 00:03:50,420
您单击它，现在您进入了自制主页，您只需要做的就是

53
00:03:50,420 --> 00:03:55,270
整行直到您将其复制的双引号。

54
00:03:55,310 --> 00:03:58,220
然后，您再次打开终端。

55
00:03:58,220 --> 00:03:59,020
妳去

56
00:03:59,150 --> 00:04:04,480
然后，您只需粘贴此行，然后按Enter，这将安装自制软件。

57
00:04:04,700 --> 00:04:09,610
然后，一旦您安装了自制软件，就可以执行此行蛮力。

58
00:04:09,630 --> 00:04:12,350
不多腿安装GCC。

59
00:04:12,770 --> 00:04:13,280
好吧。

60
00:04:13,340 --> 00:04:16,990
然后，您只需按照说明进行操作，一切都会好起来的。

61
00:04:17,000 --> 00:04:21,720
因此，这里的第一部分是实际提升的打印选择。

62
00:04:21,830 --> 00:04:28,310
然后您安装了野牛软件包，即该板将在

63
00:04:28,310 --> 00:04:31,410
您的机器，然后将其集成到Anaconda。

64
00:04:31,520 --> 00:04:35,570
只需输入这些不同的命令即可。

65
00:04:35,680 --> 00:04:40,120
并在终端中将它们逐步安装到XP Boost中。

66
00:04:40,220 --> 00:04:45,830
在完成所有安装过程后，最后一件事非常重要

67
00:04:45,830 --> 00:04:52,460
确保先退出然后退出战斗机并重新启动Anaconda，因为否则安装不会

68
00:04:52,700 --> 00:04:54,170
被考虑在内。

69
00:04:54,200 --> 00:04:55,470
因此，不要忘记这样做。

70
00:04:55,610 --> 00:04:57,820
通常，一切都应该没问题。

71
00:04:57,890 --> 00:05:02,830
当然，如果您对安装有任何疑问，请随时提出问题并进入

72
00:05:02,830 --> 00:05:03,320
一个你。

73
00:05:03,560 --> 00:05:06,960
我将帮助您正确安装它并解决任何问题。

74
00:05:07,190 --> 00:05:12,720
顺便说一下，在这里您还具有R软件包安装，之后将看到该安装。

75
00:05:12,860 --> 00:05:15,470
好吧，现在让我们回到蜘蛛。

76
00:05:15,470 --> 00:05:16,210
妳去

77
00:05:16,310 --> 00:05:21,120
现在，我们要做的是解决我们在本课程中要处理的业务问题之一。

78
00:05:21,200 --> 00:05:26,150
这实际上将是我们在深度学习部分中解决的问题。

79
00:05:26,150 --> 00:05:31,700
请记住，这是客户流失模型问题，我们需要预测银行的客户

80
00:05:31,700 --> 00:05:32,690
会离开银行。

81
00:05:32,840 --> 00:05:38,540
所以这是一个分类问题，我们将客户分为两类

82
00:05:38,540 --> 00:05:41,050
银行和那些不会离开银行的人。

83
00:05:41,180 --> 00:05:47,480
因此，请记住，对于该问题，我们获得了86％的准确度，但这花了相当长的时间，因为

84
00:05:47,870 --> 00:05:54,460
我们训练了一个带有许多错误的人工神经网络，因此花了很多时间才能执行。

85
00:05:54,490 --> 00:05:57,130
因此，在本节中，我们将做同样的事情。

86
00:05:57,150 --> 00:06:02,180
我们将对这种流失建模问题应用极端观点，您将看到我们将

87
00:06:02,180 --> 00:06:08,630
之所以获得相同的精度，是因为由于精度有限，我们还是无法获得更高的精度

88
00:06:08,630 --> 00:06:14,240
从问题本身的角度来看，信息之间没有100％的相关性

89
00:06:14,240 --> 00:06:17,770
客户的决定以及他们决定离开银行的决定。

90
00:06:17,930 --> 00:06:24,020
因此86％非常接近我们针对此特定业务问题可获得的最佳准确性。

91
00:06:24,020 --> 00:06:30,560
因此，我们可能会获得86％的收益，但这很快就会立即执行。

92
00:06:30,680 --> 00:06:36,950
此外，该数据集还包含“我是否记得13个要素”，但这不是一个大数据集。

93
00:06:37,130 --> 00:06:42,550
需要强调的是，即使这是一个大数据集，

94
00:06:42,890 --> 00:06:47,010
就性能而言，极端使用将是最好的模型之一。

95
00:06:47,060 --> 00:06:51,000
那是为了获得良好的准确性和执行速度。

96
00:06:51,170 --> 00:06:57,860
因此，例如，如果您使用的是大型数据集，我强烈建议您测试实际的提升。

97
00:06:57,860 --> 00:07:04,030
好的，所以我们现在要做的是进入此python文件的预处理阶段。

98
00:07:04,040 --> 00:07:08,770
因此，这只是第1部分，因为第2部分将实现人工神经网络。

99
00:07:08,900 --> 00:07:14,600
因此，我们只想针对与该客户流失相关的客户流失建模问题预处理数据

100
00:07:14,600 --> 00:07:16,410
我们发现的建模。

101
00:07:16,850 --> 00:07:21,710
但是实际上，我们不会在此预处理阶段进行所有操作。

102
00:07:21,710 --> 00:07:25,580
原因是对于人工神经网络。

103
00:07:25,700 --> 00:07:32,660
功能扩展完全是强制性的，必须将问题应用于深度学习。

104
00:07:32,660 --> 00:07:38,460
但是好消息是，对于真正的助推器来说，因为前GI助推器是一种很棒的助推器

105
00:07:38,480 --> 00:07:44,000
决策树很好，因此完全不需要杀戮功能，这就是很好的选择之一

106
00:07:44,000 --> 00:07:49,400
关于前GI嘘声的事情除了其高性能和快速执行速度。

107
00:07:49,450 --> 00:07:55,670
它可以使您对数据集的问题和得到的结果保持解释。

108
00:07:55,670 --> 00:08:02,180
建立模型后，我们现在可以了解为什么前GI布鲁斯之所以如此受欢迎是因为它具有

109
00:08:02,180 --> 00:08:09,260
三种品质：第一品质，高性能，第二品质，快速执行速度和第三品质。

110
00:08:09,380 --> 00:08:13,070
您可以保留对问题和模型的所有解释。

111
00:08:13,160 --> 00:08:16,170
因此，绝对是拥有您的工具包的模型。

112
00:08:16,190 --> 00:08:22,890
好的，因此在这里不需要杀死功能，因此将占用此集合中的所有内容。

113
00:08:22,970 --> 00:08:29,530
将数据集拆分为Enderton为导入库而设置的训练。

114
00:08:29,570 --> 00:08:35,360
在这里，我们将其粘贴到实际的boost文件中。

115
00:08:35,630 --> 00:08:36,530
完善。

116
00:08:36,620 --> 00:08:43,500
现在，在厕所旁边，我们将实现额外的增强，因此我们将导入极其分类器

117
00:08:43,580 --> 00:08:49,970
类，然后照常将创建该类的对象，该对象将成为额外的提升分类器

118
00:08:49,970 --> 00:08:55,810
本身，然后我们将找到该对象作为训练集，然后我们将对其进行快速评估

119
00:08:55,810 --> 00:08:59,430
您可以通过预测测试集的结果来获得所有性能。

120
00:08:59,630 --> 00:09:01,960
以及为什么不制作混淆矩阵。

121
00:09:01,970 --> 00:09:07,400
当然，让我们将这种相关方法应用于评估模型性能。

122
00:09:07,400 --> 00:09:12,680
请仔细考虑，我们会很快完成，因为我们只需要复制粘贴代码

123
00:09:12,680 --> 00:09:18,830
这些X Ubu香料和文件中的先前教程中实现的部分，您将

124
00:09:18,830 --> 00:09:20,590
看到我们将无事可做。

125
00:09:20,720 --> 00:09:26,640
一切都会非常容易，这是因为该模板可用于任何问题和数据集。

126
00:09:26,690 --> 00:09:31,010
好的，它将在下一个教程中完成所有这些操作，然后再进行机器学习。

