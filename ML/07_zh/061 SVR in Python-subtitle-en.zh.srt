1
00:00:00,390 --> 00:00:02,590
您好，欢迎来到Spuyten教程。

2
00:00:02,850 --> 00:00:07,800
今天，我们将研究我们的第二个非线性回归模型

3
00:00:07,800 --> 00:00:07,950
。

4
00:00:07,950 --> 00:00:13,100
现在，让我们开始吧，首先设置正确的文件夹，因为工作目录将找到

5
00:00:13,110 --> 00:00:14,150
在这里探索。

6
00:00:14,400 --> 00:00:17,990
转到我们的机械文件夹，然后移植到回归。

7
00:00:18,120 --> 00:00:22,100
现在，我们正处于支持向量回归中。

8
00:00:22,410 --> 00:00:25,870
这就是确保您有位置的步枪。

9
00:00:25,920 --> 00:00:30,640
如果是这种情况，请单击此处的小按钮将此文件夹设置为工作目录。

10
00:00:30,870 --> 00:00:31,360
好吧。

11
00:00:31,380 --> 00:00:41,460
现在，让我们使用回归模板，然后将所有内容从此处复制到顶部副本，然后

12
00:00:41,460 --> 00:00:44,040
像我们一样将其粘贴

13
00:00:44,160 --> 00:00:47,230
好的，现在您将看到事情将变得如此简单。

14
00:00:47,280 --> 00:00:53,040
我们基本上只需要在此处创建或回归回归，并在需要文本时进行更改。

15
00:00:53,040 --> 00:00:58,260
因此，举例来说，这里我们用VR代替回归。

16
00:00:58,290 --> 00:00:59,380
好吧。

17
00:00:59,610 --> 00:01:04,440
而且我们也可以像对待数据集一样改变这里的感觉。

18
00:01:04,860 --> 00:01:10,650
在这里，我们还可以指定要绘制为V.R. 结果。

19
00:01:10,770 --> 00:01:12,320
好的，完美。

20
00:01:12,330 --> 00:01:18,450
现在我们只需要做一件重要的事情，那就是建立我们的侵略者观点

21
00:01:18,450 --> 00:01:18,650
。

22
00:01:18,690 --> 00:01:24,810
因此，让我们执行此操作，我将删除此命令行并立即创建我们的SVR，它将

23
00:01:24,810 --> 00:01:26,640
非常简单。

24
00:01:26,710 --> 00:01:33,900
我们将从sikat学习SVM库中将其作为您的班级导入，因为您知道V.R。 实际上是

25
00:01:33,900 --> 00:01:37,280
支持向量机作为VM，但用于回归。

26
00:01:37,320 --> 00:01:41,730
因此，我们要导入的类来自SVM库。

27
00:01:41,970 --> 00:01:53,510
因此，让我们开始吧，让我们从S-K导入该类，以了解我们是如何导入的。

28
00:01:53,880 --> 00:01:54,510
好吧。

29
00:01:54,630 --> 00:01:56,320
这就是我们需要导入的情况。

30
00:01:56,340 --> 00:01:59,140
现在，让我们创建此类的对象。

31
00:01:59,460 --> 00:02:04,330
这实际上就是我们将要创建的SVR回归器本身。

32
00:02:04,500 --> 00:02:07,620
和往常一样，我们将其称为回归器。

33
00:02:08,080 --> 00:02:08,660
好。

34
00:02:08,670 --> 00:02:14,310
现在，既然您想使其成为SBO类的对象，我们需要做的是实际调用

35
00:02:14,310 --> 00:02:17,780
像我们这样的类，并在此处添加一些括号。

36
00:02:17,850 --> 00:02:20,020
让我们看一下参数press命令。

37
00:02:20,100 --> 00:02:22,130
我需要检查这堂课。

38
00:02:22,170 --> 00:02:23,300
好，让我们看看我们的位置。

39
00:02:23,310 --> 00:02:29,790
我们有许多参数，因为许多机械模型都有惩罚参数，因此您可以

40
00:02:30,060 --> 00:02:32,270
玩以调节过度拟合。

41
00:02:32,430 --> 00:02:37,860
但是，我们这里需要重点关注的最重要参数是内核，因此

42
00:02:37,860 --> 00:02:43,560
内核是要线性的，VR的，多项式的VR还是Ignatian的VR。

43
00:02:43,770 --> 00:02:48,870
这些是您拥有S形内核的最常见内核，但是我们现在想要的是

44
00:02:48,870 --> 00:02:50,070
是RDF内核。

45
00:02:50,080 --> 00:02:53,500
为什么会这样，是因为我们知道我们的问题是非线性的。

46
00:02:53,520 --> 00:02:59,860
所以我们不应该在这里使用线性核，因为和我们一起使用线性核都会使线性

47
00:02:59,900 --> 00:03:04,360
因此不适用于非线性问题的机器模型。

48
00:03:04,500 --> 00:03:10,300
然后，我们可以在这两个内核的poly和Arbi之间进行选择，以解决我们的问题。

49
00:03:10,480 --> 00:03:15,730
但是，我们将采用最常见的一种，即高斯内核，因此这里是RDF。

50
00:03:15,780 --> 00:03:18,750
因此，我们将在这里输入。

51
00:03:19,020 --> 00:03:22,250
基尔等于RB。

52
00:03:22,440 --> 00:03:26,460
即使我们不必这样做，也只是为了让您知道我们在做什么。

53
00:03:26,670 --> 00:03:30,900
因为如您所见，这里的默认内核是RBA，所以我们实际上不需要改进

54
00:03:30,900 --> 00:03:33,640
在这里，但这只是知道我们在做什么。

55
00:03:33,960 --> 00:03:34,320
好。

56
00:03:34,320 --> 00:03:38,700
所以实际上，这就是我们现在创建SVR侵略者所需的全部。

57
00:03:38,940 --> 00:03:43,400
现在，像往常一样，我们需要将此回归拟合到我们的数据集。

58
00:03:43,620 --> 00:03:47,610
那就是我们适合特征X的矩阵和因变量y。

59
00:03:47,670 --> 00:03:51,750
因此，要做到这一点，我们需要在这里放置我们的侵略者对象。

60
00:03:51,790 --> 00:03:55,390
在这里，我们使用fit方法。

61
00:03:55,590 --> 00:04:01,410
正如您在此处看到的，我们需要放置x和y，因此x是特征矩阵。

62
00:04:01,590 --> 00:04:03,900
然后为什么要依赖可行的载体。

63
00:04:04,090 --> 00:04:06,450
好的，和以前一样，像往常一样。

64
00:04:06,450 --> 00:04:07,780
这里什么都没有改变。

65
00:04:08,010 --> 00:04:11,520
简单的三行代码就可以使您成为侵略者。

66
00:04:11,550 --> 00:04:13,870
所以实际上代码已经准备好了。

67
00:04:13,890 --> 00:04:15,750
我们没有什么可做的了。

68
00:04:15,780 --> 00:04:21,310
我们已经准备好可视化所有结果，并就每笔以前的工资获得最终的预测

69
00:04:21,320 --> 00:04:21,480
。

70
00:04:21,630 --> 00:04:23,390
因此，让我们无需等待即可执行此操作。

71
00:04:23,390 --> 00:04:27,010
因此，我们将简单地一个接一个地执行这些部分。

72
00:04:27,030 --> 00:04:34,020
所以我们要在这里导入库，然后我们要导入数据集并选择特征矩阵

73
00:04:34,080 --> 00:04:35,940
X和我们的因变量y。

74
00:04:36,090 --> 00:04:37,230
所以我们开始。

75
00:04:37,290 --> 00:04:38,360
做完了

76
00:04:38,490 --> 00:04:39,590
我们在这里都很好。

77
00:04:39,750 --> 00:04:46,480
现在，让我们通过在此处选择此代码段来创建我们的SVR攻击者并执行正确的回归

78
00:04:46,500 --> 00:04:51,060
您可以看到正确创建的默认参数是自动选择的。

79
00:04:51,360 --> 00:04:56,220
顺便说一下，我们确保我们的内核是V.F。 这很重要，因为我们知道我们的问题

80
00:04:56,220 --> 00:05:02,080
是非线性的，这个内核使我们或非线性的机械模型变得如此之大。

81
00:05:02,340 --> 00:05:04,940
现在让我们得到最终的预测。

82
00:05:04,950 --> 00:05:11,670
所以请记住，这名即将被雇用的员工说，以前的工资是160 OK，现在

83
00:05:11,670 --> 00:05:19,320
让我们看看什么是新闻命令控制我们，并执行同性恋，我们仍然有发现的差距

84
00:05:19,320 --> 00:05:25,360
关于这个值，我们必须做出选择，我们可以在控制台中在此处键入wiper或进行无效浏览

85
00:05:25,390 --> 00:05:25,630
。

86
00:05:25,890 --> 00:05:31,820
在这里，我们看到为什么pred是$ 130000。

87
00:05:31,830 --> 00:05:34,230
好吧，那根本不好。

88
00:05:34,260 --> 00:05:35,420
这是怎么回事。

89
00:05:35,430 --> 00:05:40,710
您知道我们是否相信这一价值，谈判将变得非常糟糕，因为我们认为

90
00:05:40,710 --> 00:05:46,770
员工在虚张声势，但我们不要得出仓促的结论，而要看看这里的结果

91
00:05:46,770 --> 00:05:47,210
。

92
00:05:47,290 --> 00:05:53,300
因此，我将按原样选择要绘制的部分，让我们看一下。

93
00:05:53,970 --> 00:05:59,200
这是我们的美丽，这是您的模特，这条蓝色的直线水平线。

94
00:05:59,220 --> 00:06:00,410
大。

95
00:06:00,480 --> 00:06:01,260
现在我在开玩笑。

96
00:06:01,260 --> 00:06:02,460
这不是我们的现状。

97
00:06:02,460 --> 00:06:03,530
别担心。

98
00:06:03,570 --> 00:06:05,940
那你觉得这里发生了什么。

99
00:06:05,940 --> 00:06:10,370
您为什么认为我们在这里采用此蓝色水平直线。

100
00:06:10,380 --> 00:06:11,860
让我们回到我们的代码。

101
00:06:12,120 --> 00:06:17,340
所以现在您必须考虑我给了您一个不好的模板，因为我向您保证我们只会

102
00:06:17,340 --> 00:06:22,810
需要在此处创建我们的数据集，然后执行所有操作，并且所有操作均应正常运行。

103
00:06:22,890 --> 00:06:28,000
但是我还有两三件事告诉过你，非常重要的一点我会给你

104
00:06:28,000 --> 00:06:32,780
提示它处于预处理阶段，它与特征缩放有关。

105
00:06:33,000 --> 00:06:34,450
好吧，让我解释一下。

106
00:06:34,620 --> 00:06:40,590
所以您知道我告诉过您，对于大多数机器型号，我们不需要在此处应用功能缩放，因为

107
00:06:40,850 --> 00:06:47,310
库或其他类在其算法中包含功能，而在

108
00:06:47,310 --> 00:06:48,070
类。

109
00:06:48,270 --> 00:06:53,730
这就是为什么我们要在部分注释中，因为例如对于线性回归，我们实际上并没有

110
00:06:53,730 --> 00:06:57,790
必须这样做，因为它已包含在关联的类中。

111
00:06:58,000 --> 00:07:05,010
但是这里我们使用的是不太常见的类，它是VRR类，并且该类似乎不适用

112
00:07:05,220 --> 00:07:10,770
特征可以并且是算法，并且您知道这可能是由于我们是模型

113
00:07:10,770 --> 00:07:12,160
是一种不太常见的模型。

114
00:07:12,210 --> 00:07:15,680
因此，也许这就是该类不包含功能的原因。

115
00:07:15,880 --> 00:07:17,000
好吧，让我们实际检查一下。

116
00:07:17,010 --> 00:07:23,790
如果您只是基本阅读本指南，让我们在此处删除这些公用知识以实际应用

117
00:07:23,790 --> 00:07:30,090
部分，但我们将从头开始，我们将重设整个代码，

118
00:07:30,150 --> 00:07:32,840
确保我们不做任何事情。

119
00:07:33,010 --> 00:07:34,640
OK，所以重启内核。

120
00:07:35,160 --> 00:07:36,400
是。

121
00:07:36,400 --> 00:07:38,830
现在重新启动并连接到新女孩。

122
00:07:38,880 --> 00:07:39,370
好。

123
00:07:39,420 --> 00:07:43,650
因此请小心，我们已经删除了该部分并在此处进行评论，因为您可以看到我们没有创建任何内容。

124
00:07:43,650 --> 00:07:45,350
训练集和测试在这里。

125
00:07:45,390 --> 00:07:51,300
因此，我们实际上需要替换由X训练的X，然后无需对测试进行任何转换，因为

126
00:07:51,300 --> 00:07:54,810
这里没有测试，因此我也将删除此行。

127
00:07:55,200 --> 00:08:02,480
您知道要使其结构化，我将在此处删除该行并将其放在此处。

128
00:08:02,560 --> 00:08:09,010
而且，不要忘了在这里删除白刺并简单地替换为白刺。

129
00:08:09,160 --> 00:08:10,130
现在一切都很好。

130
00:08:10,170 --> 00:08:11,860
我们已经以数据为特征。

131
00:08:12,120 --> 00:08:15,990
但是您知道已经有一段时间了，因为我们还没有讨论功能，所以让我快速介绍一下

132
00:08:16,000 --> 00:08:18,010
回顾这里的工作。

133
00:08:18,000 --> 00:08:24,260
因此，我们在此处创建两个对象，分别为cx和y，它们是来自带支架比例尺类的对象。

134
00:08:24,260 --> 00:08:29,490
将要缩放特征X的度量以及因变量y并进行缩放

135
00:08:29,500 --> 00:08:35,890
x和y我们正在使用FCX和SC y对象的拟合传递方法。

136
00:08:36,000 --> 00:08:40,950
我想这里要了解的重要一点是，您需要创建两个单独的Dunton标量

137
00:08:40,950 --> 00:08:45,640
对象，因为这两个对象中的每一个都将适合某个矩阵。

138
00:08:45,630 --> 00:08:51,030
因此，这对X是免费的，而对Y是合适的，因此您可以创建

139
00:08:51,030 --> 00:08:53,820
一个对象并将其应用于x和y。

140
00:08:53,830 --> 00:08:55,410
这就是为什么我们要创建两个。

141
00:08:55,530 --> 00:08:59,730
而且我们不仅要进行拟合，而且还要进行一些变换以实现一定的缩放比例。

142
00:08:59,860 --> 00:09:03,800
这要归功于传输方法中的转换组件。

143
00:09:03,930 --> 00:09:08,910
基本上，此转换工具将缩放x和y。

144
00:09:09,290 --> 00:09:09,930
好。

145
00:09:10,120 --> 00:09:12,130
因此，这只是一个简短的提醒和回顾。

146
00:09:12,210 --> 00:09:19,110
现在，让我们实际重新执行整个代码，看看是否真的得到了它

147
00:09:19,410 --> 00:09:27,540
水平差的直线模型表示我将首先导入库，然后执行

148
00:09:27,610 --> 00:09:30,680
以及导入数据集。

149
00:09:30,930 --> 00:09:33,670
现在，让我们最终应用功能扫描。

150
00:09:33,660 --> 00:09:37,480
因此，您将选择该部分并执行。

151
00:09:37,920 --> 00:09:46,140
在这里，我们得到一些警告，这是因为您知道我们的数据集是在整数之前组成的

152
00:09:46,600 --> 00:09:52,450
这只是一个警告，告诉我们我们的数据整数已转换为float，这完全是

153
00:09:52,440 --> 00:09:56,820
很好，因为仅获取我们的数据就可以转换为浮动数据。

154
00:09:56,830 --> 00:10:02,620
如果我们现在查看X，则这里有所有这些浮点数，它们是将来缩放的结果

155
00:10:02,620 --> 00:10:02,970
。

156
00:10:03,120 --> 00:10:04,150
和这里的y一样。

157
00:10:04,140 --> 00:10:10,990
在我们有10个级别从1到10之前，现在我们得到的浮点数是从负1到正2.7

158
00:10:10,990 --> 00:10:11,290
。

159
00:10:11,590 --> 00:10:13,470
好吧，那完全没问题。

160
00:10:13,500 --> 00:10:16,300
而且您知道Python中的警告一直在发生。

161
00:10:16,410 --> 00:10:22,190
让我们不要再谈这个了，让我们继续下一步，下一步是创建我们的侵略者

162
00:10:22,200 --> 00:10:23,830
并希望它能正常工作。

163
00:10:23,970 --> 00:10:28,620
因此，我将选择按Commander控制的部分并尝试执行。

164
00:10:28,780 --> 00:10:34,080
在这里，我们使用选择的所有不同参数正确创建了回归器。

165
00:10:34,150 --> 00:10:42,730
好吧，现在我们要弄清楚我们是否能获得比我们获得的130 K薪水更高的价值

166
00:10:43,030 --> 00:10:44,740
当我们不应用要素比例时。

167
00:10:44,840 --> 00:10:51,590
所以请记住，这名员工说他以前的薪水是16万，他在谈判中要求更多

168
00:10:51,900 --> 00:10:55,580
在本教程开始时，我们获得了130 k。

169
00:10:55,730 --> 00:11:01,420
但是在获得预测本身之前，让我们先对其进行可视化处理，因为

170
00:11:01,420 --> 00:11:05,990
我们将立即查看我们的侵略者是否狭窄，因为您知道我们会立即

171
00:11:05,990 --> 00:11:08,620
看看我们是否得到这条直线。

172
00:11:08,620 --> 00:11:09,610
因此，让我们开始吧。

173
00:11:09,620 --> 00:11:16,580
让我们实际选择该部分并执行以绘制SVR解析图，而且效果越来越好

174
00:11:16,580 --> 00:11:18,810
而不是一条水平线。

175
00:11:19,000 --> 00:11:21,540
这就是VR模型本身。

176
00:11:21,560 --> 00:11:26,110
这就是它试图拟合数据的方式，我们可以看到它很漂亮。

177
00:11:26,150 --> 00:11:29,330
每个真实的观察结果都是众所周知的。

178
00:11:29,690 --> 00:11:30,870
让我们不要这样做。

179
00:11:31,010 --> 00:11:31,310
好。

180
00:11:31,320 --> 00:11:37,130
因此，提醒一下，红色点是真实的观察点，即与之相关的实际工资

181
00:11:37,120 --> 00:11:40,820
到该蓝色曲线上的位置水平和所有点。

182
00:11:40,820 --> 00:11:42,210
这是预测点。

183
00:11:42,230 --> 00:11:48,380
例如，如果我们在这一点上对应于一个较大的位置，也就是

184
00:11:48,500 --> 00:11:52,940
如果我在你的伴侣中没记错的话，我会说第八名。

185
00:11:53,060 --> 00:11:59,740
因此，对于此级别，实际观察点在此对应于该红色点，并与此对应

186
00:11:59,750 --> 00:12:05,420
实际工资和预测点实际上是该红色点在蓝色曲线上的投影

187
00:12:05,410 --> 00:12:05,890
这里。

188
00:12:06,110 --> 00:12:13,060
这对应于此预测的卖家，因此不必担心此处的比例值

189
00:12:13,070 --> 00:12:18,070
实际的预计工资，但这只是在提醒您如何正确区分

190
00:12:18,080 --> 00:12:20,510
实现点和预测。

191
00:12:20,530 --> 00:12:27,500
但是无论如何，这里的重点是，由于蓝色曲线，我们现在感觉数据集要好得多

192
00:12:27,740 --> 00:12:30,660
已经非常接近所有真实的观察点。

193
00:12:30,760 --> 00:12:32,090
但是实际上有一个例外。

194
00:12:32,090 --> 00:12:38,270
在这里，这个真实的观察点存在一个例外，它对应于我记得的CEO

195
00:12:38,260 --> 00:12:42,720
年薪为一百万美元，这里的薪水为10级。

196
00:12:42,800 --> 00:12:46,370
您能弄清楚为什么这样做。

197
00:12:46,370 --> 00:12:51,850
嗯，这是因为我们Almelo不适合这个事实

198
00:12:51,860 --> 00:12:57,200
与首席执行官相对应的真实观察点嗯，是因为首席执行官被视为离群值

199
00:12:57,200 --> 00:12:57,660
这里。

200
00:12:57,670 --> 00:13:04,430
对不起首席执行官，但这就是正在发生的事情，因为此处的模型具有一些惩罚参数

201
00:13:04,700 --> 00:13:07,010
在其算法中默认选择。

202
00:13:07,120 --> 00:13:12,710
因此，由于CEO的观察点与其他数据点相距甚远。

203
00:13:12,740 --> 00:13:18,970
好的，因为您的模型认为此观察点是异常值，因此适合这些观察

204
00:13:18,980 --> 00:13:19,440
点。

205
00:13:19,490 --> 00:13:24,750
这就是为什么我们为所有这些观察点都获得了非常合适的模型的原因，而在这里却并非如此

206
00:13:24,790 --> 00:13:24,970
。

207
00:13:25,220 --> 00:13:32,090
但这实际上对我们来说还可以，因为我们感兴趣的是保护这6.5的薪水

208
00:13:32,090 --> 00:13:38,060
此处的级别，因为这与我们正在协商的该员工的先前级别相对应

209
00:13:38,060 --> 00:13:38,880
现在。

210
00:13:39,110 --> 00:13:46,760
这样就可以了，我们实际上可以继续进行下一步的预测步骤，以实际了解

211
00:13:46,880 --> 00:13:52,160
因为我们的模型预测的是未来潜在雇员的薪水6.5。

212
00:13:52,370 --> 00:13:54,330
因此，让我们无需等待即可执行此操作。

213
00:13:54,350 --> 00:14:00,060
我们很乐意直接选择并执行此操作，但是不幸的是，我们必须在这里做一些事情

214
00:14:00,470 --> 00:14:04,960
我们要做的这点小事当然与我们应用未来

215
00:14:04,970 --> 00:14:12,500
缩放到我们的数据X和Y，因此正好像我们在这里回归时拟合到的x和y

216
00:14:12,520 --> 00:14:13,350
变了。

217
00:14:13,460 --> 00:14:19,290
因此，由于6.5尚未进行某种转换，因此我们实际上需要对其进行转换。

218
00:14:19,300 --> 00:14:20,870
这就是我们现在要做的。

219
00:14:20,990 --> 00:14:27,250
因此，基本上很简单，我们要做的就是应用s c x对象

220
00:14:27,250 --> 00:14:28,930
用于缩放功能。

221
00:14:29,140 --> 00:14:33,980
好吧，我们将对该主题应用6.5，以便它适合侵略者。

222
00:14:34,120 --> 00:14:37,220
因此，这还不是全部，但让我们从此开始。

223
00:14:37,250 --> 00:14:44,540
因此，基本上，我们将要使用此预测函数，并将ESI应用于得分X标量

224
00:14:44,540 --> 00:14:48,440
对象，然后再次使用transform方法。

225
00:14:48,500 --> 00:14:53,290
因为我们的对象已经适合特征X的矩阵，所以不进行变换。

226
00:14:53,310 --> 00:14:57,130
很好，我们只需要transform方法。

227
00:14:57,130 --> 00:14:57,960
开始了。

228
00:14:58,180 --> 00:15:07,010
现在，我们需要将此6.5包含在SGX标量对象的此转换方法中。

229
00:15:07,250 --> 00:15:11,330
但是要小心，有些事情我们必须小心。

230
00:15:11,330 --> 00:15:16,550
您知道最好检查函数的参数，以防可能出现类型问题

231
00:15:16,550 --> 00:15:16,770
。

232
00:15:16,820 --> 00:15:19,230
这样您就会明白我的意思了，让我们按一下评论。

233
00:15:19,280 --> 00:15:22,190
我需要检查作为传输方法的功能。

234
00:15:22,370 --> 00:15:28,250
如您所见，此传输方法在这里期望X，该X应该是数组。

235
00:15:28,250 --> 00:15:35,300
所以这里的输入和传递方法必须是一个数组，这里的6.5值只是数字

236
00:15:35,300 --> 00:15:35,890
值。

237
00:15:35,920 --> 00:15:37,480
这样会得到数据类型错误。

238
00:15:37,490 --> 00:15:44,220
我们只剩下6.5，我们需要将此6.5数值转换为数组。

239
00:15:44,330 --> 00:15:50,590
为此，技巧非常简单，我们只需要使用非P数组，然后我们将创建

240
00:15:50,680 --> 00:15:56,590
一个仅包含一个单元格的简单数组，该单元格将包含6.5数值。

241
00:15:56,680 --> 00:16:04,400
因此，要使用Numby使用此数组函数，我们只需要先用P取数字，然后用点然后取

242
00:16:04,510 --> 00:16:05,250
数组。

243
00:16:05,260 --> 00:16:05,870
开始了。

244
00:16:05,990 --> 00:16:14,260
现在我们需要打开一些新的括号，然后放一些括号，其中将包含6.5数值

245
00:16:14,260 --> 00:16:14,970
值这里。

246
00:16:15,080 --> 00:16:18,160
但是，如果我们仅将一些放在方括号中，则它将不是数组。

247
00:16:18,160 --> 00:16:23,810
这将是一个元素的向量，因此将创建一个像矩阵这样的真实数组。

248
00:16:23,960 --> 00:16:28,170
我们需要再放置一副这样的括号。

249
00:16:28,180 --> 00:16:28,820
开始了。

250
00:16:28,820 --> 00:16:36,140
所以基本上这对两对括号的意思是它是仅一行的数组

251
00:16:36,190 --> 00:16:37,230
一栏。

252
00:16:37,340 --> 00:16:42,110
即是一个包含此6.5数值的单元格。

253
00:16:42,470 --> 00:16:45,610
现在，让我们检查一下括号的数量是否正确。

254
00:16:45,880 --> 00:16:48,390
确定，因此此括号对应于数组。

255
00:16:48,430 --> 00:16:50,940
该括号对应于变换。

256
00:16:50,960 --> 00:16:54,780
因此，我们只需要再加上一个括号即可进行预测。

257
00:16:54,830 --> 00:17:01,420
我想现在更好了，这要归功于这种转换方法，将6.5数值转换为

258
00:17:01,420 --> 00:17:04,710
现在适合侵略者的方式

259
00:17:04,850 --> 00:17:06,740
但是不幸的是，这还不是全部。

260
00:17:06,760 --> 00:17:13,370
我们还需要做的是使用逆变换来获得工资的原始比例，因为

261
00:17:13,370 --> 00:17:20,470
如果我们以这种方式执行这条线，我们将获得工资的按比例预测，而我们不希望这样

262
00:17:20,470 --> 00:17:20,670
。

263
00:17:20,680 --> 00:17:23,170
我们当然希望出售原始技能。

264
00:17:23,170 --> 00:17:28,760
我们不希望有0.03的薪水预测，因为这是我们在这行中得到的结果。

265
00:17:28,760 --> 00:17:29,510
你可以试试。

266
00:17:29,650 --> 00:17:36,790
因此，为了获得工资的原始比例，我们只需要对比例转换进行逆

267
00:17:37,010 --> 00:17:38,790
做到这一点真的很简单。

268
00:17:38,810 --> 00:17:44,180
我们只需要做的就是应用逆变换方法，我们就需要应用逆变换

269
00:17:44,170 --> 00:17:47,390
特定标量对象的传递方法。

270
00:17:47,410 --> 00:17:53,640
因此根据您的情况，它将是se对象或Z y对象。

271
00:17:53,870 --> 00:18:01,330
你知道吗，因为这段代码的结果是对薪水的预测Y Y Pratt Well

272
00:18:01,340 --> 00:18:06,630
这对应于因变量，因此对应于我们需要取反的标量对象

273
00:18:06,620 --> 00:18:09,440
转换当然就是您Y。

274
00:18:09,620 --> 00:18:10,740
因此，让我们这样做。

275
00:18:10,760 --> 00:18:18,890
我们将使用s c为什么只取对象，然后在此处应用逆变换

276
00:18:18,880 --> 00:18:20,170
方法在这里。

277
00:18:20,330 --> 00:18:21,320
所以我们开始。

278
00:18:21,620 --> 00:18:28,060
再一次，我们需要将所有这部分放在这里，您知道我们得到了我们的预测和我们的缩放预测

279
00:18:28,070 --> 00:18:29,960
6.5级薪水

280
00:18:30,190 --> 00:18:36,700
我们需要将所有这部分放在括号中，因为这将是逆变换的输入

281
00:18:36,690 --> 00:18:38,890
对象的方法。

282
00:18:39,130 --> 00:18:40,920
好的，现在准备好了。

283
00:18:41,060 --> 00:18:46,860
让我们选择这条线，然后用手指交叉，我们将对薪水有一个很好的预测

284
00:18:46,870 --> 00:18:49,640
因此，让我们回到可行的专家那里进行查看。

285
00:18:49,760 --> 00:18:53,350
让我们选择这一行并执行。

286
00:18:53,410 --> 00:18:58,970
在这里，我们得到了17万美元的不错的预测。

287
00:18:58,970 --> 00:19:04,690
这是一个很好的预测，因为首先我们非常接近一百六十万美元的薪水

288
00:19:04,820 --> 00:19:07,230
被潜在的未来雇员提到。

289
00:19:07,280 --> 00:19:10,100
而且它在谈判的右边。

290
00:19:10,100 --> 00:19:12,250
因此，这是一个很好的模型。

291
00:19:12,260 --> 00:19:16,420
它给了我们很好的预测，实际上，如果您想看看我们适合的真实情况，

292
00:19:16,430 --> 00:19:21,890
我们可以很快地做到这一点，所以我们可以在这里减少这段代码

293
00:19:21,950 --> 00:19:23,350
得到平滑的曲线。

294
00:19:23,570 --> 00:19:27,110
因此，将其复制并粘贴到此处。

295
00:19:27,200 --> 00:19:27,520
好的。

296
00:19:27,530 --> 00:19:33,570
现在，我们可以指定Steve为结果，让我们来看看执行情况。

297
00:19:33,590 --> 00:19:35,080
在这里。

298
00:19:35,150 --> 00:19:41,060
这是真实的，因为我们像以前一样拟合曲线，但是我们变得越来越漂亮

299
00:19:41,180 --> 00:19:44,860
更平滑的曲线结论，因为它是一个很好的模型。

300
00:19:44,890 --> 00:19:50,590
我们对6.5级工资有很好的预测，在下一节中，我们将研究该决策

301
00:19:50,600 --> 00:19:51,760
树回归。

302
00:19:51,860 --> 00:19:55,530
让我们来看看它们与我们到目前为止构建的相比如何。

303
00:19:55,610 --> 00:19:57,180
在那之前享受机器学习

