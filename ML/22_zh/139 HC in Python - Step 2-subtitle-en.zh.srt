1
00:00:00,390 --> 00:00:03,170
您好，欢迎来到本Python教程。

2
00:00:03,270 --> 00:00:09,900
因此，在上一个教程中，我们使用Pandurs导入了模型数据集，并准备了x变量

3
00:00:09,900 --> 00:00:16,040
其中包含我们感兴趣的两个列，列年收入和列支出得分。

4
00:00:16,050 --> 00:00:21,990
到目前为止，您可以注意到，我们所做的与Kamins完全相同，您将看到

5
00:00:21,990 --> 00:00:27,870
在我们即将要执行的Newstead中，我们将执行相同的行动计划，因为请记住

6
00:00:27,870 --> 00:00:34,410
在此阶段，在上一节中使用Kamins时，我们使用了弯头法来找到最优值。

7
00:00:34,410 --> 00:00:35,720
集群数。

8
00:00:35,790 --> 00:00:42,360
在这里，在分层聚类中，这一新步骤还包括找到最佳数目的聚类

9
00:00:42,360 --> 00:00:42,730
。

10
00:00:42,810 --> 00:00:45,230
只有这次，我们才不会使用弯头方法。

11
00:00:45,390 --> 00:00:47,820
我们将使用该死的程序。

12
00:00:47,820 --> 00:00:53,100
因此，让我们这样做吧，再加上我们的牙科治疗师来解决这个业务问题，然后我们将拥有

13
00:00:53,100 --> 00:00:59,070
看看我们的DNA程序，我们将使用在直觉部分中明确说明的方法

14
00:00:59,280 --> 00:01:01,550
找到最佳数量的群集。

15
00:01:01,770 --> 00:01:02,640
所以我们开始。

16
00:01:02,730 --> 00:01:09,900
让我们在这里介绍一个新的部分，并用危险克来注释以找到最佳数字

17
00:01:09,900 --> 00:01:11,140
集群。

18
00:01:11,430 --> 00:01:14,390
让我们立即编写代码以绘制该程序。

19
00:01:14,760 --> 00:01:15,020
好。

20
00:01:15,030 --> 00:01:23,160
因此，我们要做的第一件事是并排导入没有开源的Python库

21
00:01:23,160 --> 00:01:27,910
包含用于进行分层聚类和构建程序的工具。

22
00:01:28,200 --> 00:01:33,160
因此，要导入Type-I，实际上我们不会按库导入整个站点。

23
00:01:33,270 --> 00:01:37,850
我们将导入对构建DNA程序感兴趣的工具。

24
00:01:37,860 --> 00:01:45,550
因此，我们在DOT群集点层次结构中键入导入方。

25
00:01:45,810 --> 00:01:51,330
因此，这就是Sipar库进行分层聚类并简化这个庞大名称的全部内容

26
00:01:51,330 --> 00:01:56,510
我们将其称为C H，以后再使用它会更简单。

27
00:01:56,520 --> 00:01:59,760
好的，现在我们拥有了进行编程所需的一切。

28
00:01:59,910 --> 00:02:06,660
现在，令人敬畏的是，我们仅需一行即可构建我们的DNA程序。

29
00:02:06,660 --> 00:02:07,740
代码。

30
00:02:07,860 --> 00:02:10,570
因此，让我们立即编写一行代码。

31
00:02:10,590 --> 00:02:17,940
我们先创建一个变量，然后程序等于SEH，这是站点的快捷方式。

32
00:02:17,940 --> 00:02:25,110
集群层次结构点，然后编程实际上是一个例程，使所有

33
00:02:25,110 --> 00:02:34,680
Kiril在直觉部分进行了解释，在刻录论文中，我们添加了S H表示链接链接，因此链接年龄

34
00:02:34,710 --> 00:02:41,110
实际上是层次聚类的算法本身，然后在链接中我们必须指定

35
00:02:41,130 --> 00:02:43,680
我们应用和参与哪些数据。

36
00:02:43,680 --> 00:02:47,940
就是X。这是我们的第一个参数。

37
00:02:48,180 --> 00:02:53,970
然后，作为第二个参数，添加用于查找集群的方法

38
00:02:54,510 --> 00:02:57,410
我们将选择单词方法。

39
00:02:57,600 --> 00:03:01,710
所以在这里我们写方法等于引号中的单词。

40
00:03:02,160 --> 00:03:03,960
那么这个单词方法是什么。

41
00:03:04,020 --> 00:03:08,390
实际上，这是一种尝试最小化每个群集内方差的方法。

42
00:03:08,490 --> 00:03:13,940
记得在卡明斯，当我们试图最小化平方集内平方和以绘制肘部时

43
00:03:13,940 --> 00:03:19,830
方法图在这里几乎是相同的，唯一的区别是不是最小化

44
00:03:19,830 --> 00:03:24,200
加上平方和，我们使簇变量最小化。

45
00:03:24,330 --> 00:03:29,960
这就是每个集群中的差异，也就是这一行代码的差异。

46
00:03:29,960 --> 00:03:32,400
我们设法建立了我们的DNA程序。

47
00:03:32,400 --> 00:03:37,080
这与在elbow方法中不一样，当我们不得不在这里仅用一行代码进行完整循环时。

48
00:03:37,080 --> 00:03:42,990
我们设法建立了DENTRO克，所以现在我们要给它命名为x轴上的名称

49
00:03:43,080 --> 00:03:46,320
和y轴上的名称，让我们看看会发生什么。

50
00:03:46,680 --> 00:03:55,680
因此，我们在此处添加该标题的BLT，让我们选择标题，然后编程P L T Dot X标签并用括号括起来

51
00:03:55,680 --> 00:03:59,990
客户，因为在x轴上将是我们的所有客户。

52
00:04:00,000 --> 00:04:05,290
然后，通过键入BLT点y标签为Y轴添加标签。

53
00:04:05,580 --> 00:04:11,220
我们将放置欧几里得距离，因为den程序中的垂直线实际上是

54
00:04:11,220 --> 00:04:16,350
群集之间的距离，即群集之间几个世纪之间的距离。

55
00:04:16,890 --> 00:04:23,040
然后我们当然要添加显示括号的BLT，以指定完成绘制并准备好绘制

56
00:04:23,040 --> 00:04:23,820
显示。

57
00:04:24,120 --> 00:04:27,240
好的，现在让我们动动手指，希望它能正常工作。

58
00:04:27,240 --> 00:04:32,970
如果您遵循相同的结果，我们将找到与卡明斯相同的结果

59
00:04:32,970 --> 00:04:38,610
截面是通过肘法发现的五个簇的最佳数量。

60
00:04:38,610 --> 00:04:40,990
因此，让我们选择整个代码部分。

61
00:04:40,990 --> 00:04:45,390
控制命令加回车执行。

62
00:04:45,390 --> 00:04:48,050
这是我们美丽的程序。

63
00:04:48,100 --> 00:04:54,300
好，让我们在底部描述这条街，我们有所有的客户和垂直线

64
00:04:54,300 --> 00:05:00,050
我们在地面上看到的是簇之间的欧几里得距离。

65
00:05:00,870 --> 00:05:06,720
然后，该程序表示在所有层次结构中找到的所有不同集群

66
00:05:06,720 --> 00:05:10,860
Curiel在直觉部分中说明的集群过程。

67
00:05:11,100 --> 00:05:15,190
现在，我们要做的是找到最佳数量的群集。

68
00:05:15,210 --> 00:05:16,730
那么我们该怎么做。

69
00:05:16,830 --> 00:05:23,410
我们在不跨越任何水平线的情况下，寻找可以在垂直方向上形成的最大距离。

70
00:05:24,180 --> 00:05:27,630
我们可以清楚地看到最大距离就在这里。

71
00:05:27,810 --> 00:05:34,110
那就是我从这里开始，然后向下走，然后向下走，确保我不会越过任何水平线

72
00:05:34,110 --> 00:05:34,860
线。

73
00:05:35,070 --> 00:05:36,950
好，下去吧，下去吧。

74
00:05:36,960 --> 00:05:39,310
没有水平线下降。

75
00:05:39,390 --> 00:05:42,420
然后突然我越过了这条水平线。

76
00:05:42,420 --> 00:05:49,590
所以最后从这里到这里是我可以跨越的最大距离

77
00:05:49,600 --> 00:05:49,890
。

78
00:05:50,220 --> 00:05:55,800
现在，要找到最佳的聚类数量，我们只需要计算垂直线的数量即可

79
00:05:55,800 --> 00:05:57,140
这里的空间。

80
00:05:57,390 --> 00:06:01,660
那就是1 2 3 4和5

81
00:06:02,100 --> 00:06:02,620
完善。

82
00:06:02,620 --> 00:06:07,310
因此，这与我们用卡明斯用肘法获得的结果完全相同。

83
00:06:07,320 --> 00:06:12,870
因此，我们非常高兴，我们可以继续进行下一步，并记住在这一阶段与Kamins合作的过程

84
00:06:12,870 --> 00:06:19,290
下一步是将Kamins算法适合我们的数据X。这里又是相同的

85
00:06:19,290 --> 00:06:21,900
因为我们刚刚发现了许多集群。

86
00:06:21,900 --> 00:06:26,490
我们的下一步将是将分层聚类算法适合我们的数据x。

87
00:06:26,700 --> 00:06:29,880
这就是我们在下一个教程中要做的。

88
00:06:29,880 --> 00:06:31,810
因此，我期待与您相会。

89
00:06:31,920 --> 00:06:33,480
直到那时快乐的学习

