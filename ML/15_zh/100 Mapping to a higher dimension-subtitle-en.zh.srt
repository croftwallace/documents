1
00:00:00,490 --> 00:00:04,930
您好，欢迎回到今天的教程中的机器学习课程，我们将了解我们如何

2
00:00:04,930 --> 00:00:11,590
可以将我们的非线性可分离数据集映射到更高的维度，然后得到线性可分离

3
00:00:11,590 --> 00:00:12,360
数据集。

4
00:00:12,430 --> 00:00:18,550
调用支持向量机算法为数据集构建决策边界，然后进行投影

5
00:00:18,580 --> 00:00:21,440
所有这些都回到了我们的原始尺寸。

6
00:00:21,460 --> 00:00:22,600
涉及的内容很多。

7
00:00:22,600 --> 00:00:24,790
让我们开始吧。

8
00:00:24,790 --> 00:00:29,740
首先，我们将看一个简化的例子，我们将看一维数据集。

9
00:00:29,740 --> 00:00:36,910
因此，通常情况下，我们使用两个维度来可视化PowerPoint中的所有内容，以使其看起来更漂亮，

10
00:00:36,910 --> 00:00:40,710
这样我们就可以了解它如何在多个维度上发挥作用。

11
00:00:40,810 --> 00:00:44,470
但是现在，这对于我们来说太复杂了。

12
00:00:44,470 --> 00:00:52,240
因此，我们将从一个维度开始。在这里，我们有了X-1维度，

13
00:00:52,240 --> 00:00:54,110
点，所以我们得到了9个数据点。

14
00:00:54,310 --> 00:01:02,620
正如我们看到的那样，我们的非线性是可分离的

15
00:01:02,620 --> 00:01:06,520
空格，线性分隔符将不是直线或点。

16
00:01:06,520 --> 00:01:06,790
对。

17
00:01:06,790 --> 00:01:14,960
因此，在二维空间或线性线性分隔符中，是在三维空间中的一条线

18
00:01:14,970 --> 00:01:20,290
一个超平面，但是在一维空间中它是一个点，因此我们可以简单地将绿色与

19
00:01:20,290 --> 00:01:21,900
这里的红色带有一个点。

20
00:01:21,910 --> 00:01:27,400
不，如果我们把它放在这里，我们将无法与之分离，这与那些谁将它放在这里将会是分开的

21
00:01:27,400 --> 00:01:27,790
从那开始。

22
00:01:27,790 --> 00:01:31,440
因此，这是一个非线性可分离的数据集。

23
00:01:31,480 --> 00:01:40,450
现在我们如何应用增加此空间维数的方法以使其更易分离

24
00:01:40,780 --> 00:01:43,600
更高维度的数据集，这就是我们要研究的内容。

25
00:01:43,780 --> 00:01:46,170
这似乎是不可能的。

26
00:01:46,190 --> 00:01:52,630
所以我首先为我了解到这一点，就像哇，你怎么能把非线性

27
00:01:52,630 --> 00:01:59,060
异议人士以某种方式神奇地增加了维数，您得到了一个线性可分离的数据集，

28
00:01:59,190 --> 00:02:01,520
你知道听起来很荒谬。

29
00:02:01,720 --> 00:02:05,470
但这实际上是可能的，这就是我们现在要看到的。

30
00:02:05,470 --> 00:02:08,020
因此，我们将即时创建此映射函数。

31
00:02:08,020 --> 00:02:13,180
因此，可以说此时或此处约为5。

32
00:02:13,180 --> 00:02:17,050
所以这里是零，然后这里是五。

33
00:02:17,050 --> 00:02:17,710
没关系。

34
00:02:17,710 --> 00:02:22,080
它可以是任何数字，但仅出于论证目的，我们可以说这里的要点是5。

35
00:02:22,240 --> 00:02:22,640
对。

36
00:02:22,640 --> 00:02:23,380
然后它继续前进。

37
00:02:23,380 --> 00:02:28,690
因此，构建映射功能的第一步是可以构建多个映射功能。

38
00:02:28,690 --> 00:02:32,280
我只是向您展示一个我想到的东西。

39
00:02:32,380 --> 00:02:39,120
因此，第一步是使F等于X减去5，以便从我们的数据集中减去5。

40
00:02:39,160 --> 00:02:47,290
这就是将要执行的操作，将所有内容移至左侧，因此

41
00:02:47,290 --> 00:02:52,660
现在基本上就是这个结果了。

42
00:02:52,660 --> 00:02:58,270
因此，如果您将5减去X减去5，您将知道这些将变为负数。

43
00:02:58,270 --> 00:03:06,040
这些将保持正值，然后下一步将所有这些取平方，因此f现在等于

44
00:03:06,040 --> 00:03:07,900
2 x减去5平方。

45
00:03:07,900 --> 00:03:09,220
那么一切看起来如何。

46
00:03:09,220 --> 00:03:18,580
好吧，基本上，您将拥有遍历图表的平方函数，然后所有这些将

47
00:03:18,580 --> 00:03:20,760
投影到功能上。

48
00:03:20,770 --> 00:03:21,280
好了

49
00:03:21,280 --> 00:03:22,470
这就是它的样子。

50
00:03:22,470 --> 00:03:24,650
F等于X减去5的平方。

51
00:03:24,850 --> 00:03:30,100
现在我们要做的只是想知道它确实是线性可分离的。

52
00:03:30,100 --> 00:03:30,940
所以我们走了。

53
00:03:31,000 --> 00:03:33,030
这是我们的线性分隔符。

54
00:03:33,160 --> 00:03:37,860
因此，在二维空间中，我记得线性分隔符是一条直线。

55
00:03:37,960 --> 00:03:45,760
正如您所看到的，该数据集在该维度上可以线性分离，我知道这是令人惊讶的，

56
00:03:45,760 --> 00:03:50,980
甚至有些令人震惊，但确实如此，因此您可以看到我们能够走这条线，

57
00:03:50,980 --> 00:03:58,180
将数据中的所有红色元素与绿色元素分开，仅此而已。

58
00:03:58,360 --> 00:04:04,450
然后我们从这里下一步是将所有内容投影回我们的原始空间，然后我们

59
00:04:04,450 --> 00:04:10,090
会知道如何在功能上将绿色与红色分开。

60
00:04:10,600 --> 00:04:15,320
当您将某物映射到更高维度时，就会发生这种情况。

61
00:04:15,490 --> 00:04:23,880
因此，现在知道这个示例并看到它可以实际工作了，我们可以将其扩展到更高的维度

62
00:04:23,890 --> 00:04:26,680
您知道从二维空间开始，所以让我们看一下。

63
00:04:26,890 --> 00:04:33,350
因此，存在我们的二维空间，基本上您会应用相同的原理，因此您可以在此处应用。

64
00:04:33,400 --> 00:04:40,510
您不能调用机器算法的支持，因为它不是非线性超级碗。

65
00:04:40,830 --> 00:04:42,920
在此空间中设置数据。

66
00:04:42,930 --> 00:04:49,090
但是然后您将应用某种映射功能，例如现在，我们将不详细介绍

67
00:04:49,090 --> 00:04:51,410
映射功能。

68
00:04:51,520 --> 00:04:54,230
同样，可能有多个不同的选择，依此类推。

69
00:04:54,340 --> 00:05:00,460
但基本上基于前面的示例，我们现在知道有可能像我们看到的经验

70
00:05:00,460 --> 00:05:05,260
证明可以做同样的事情适用于将二维空间移动到三个

71
00:05:05,260 --> 00:05:11,440
三维空间，您可以将其映射到三维空间，然后以某种方式变为线性

72
00:05:11,440 --> 00:05:17,770
在这个空间中可分离的数据集，这里我们有了一个新维度Zed和一个三维

73
00:05:17,770 --> 00:05:21,300
线性分隔符不再是一行。

74
00:05:21,310 --> 00:05:22,450
这是一架超飞机。

75
00:05:22,600 --> 00:05:29,360
因此，该超平面按照我们想要的方式将数据集的两个部分分开。

76
00:05:29,380 --> 00:05:35,110
因此，支持向量机算法已帮助我们构建了该超平面，然后基本上

77
00:05:35,110 --> 00:05:41,680
得到了这个结果，然后我们只是投影回二维空间，就得到了这个圆

78
00:05:41,710 --> 00:05:51,440
包含我们的类，惊喜或类，然后我们去了非线性分隔符。

79
00:05:51,460 --> 00:06:00,220
因此，正如您所看到的，即使我们遇到了一个更复杂的问题，我们仍然无法解决

80
00:06:00,670 --> 00:06:04,820
直接应用我们以前使用的支持向量机算法。

81
00:06:04,900 --> 00:06:14,110
我们仍然可以进入更高的维度，然后应用支持X机器算法，就像我们不会

82
00:06:14,110 --> 00:06:19,100
详细说明是否始终存在，是否在这种情况下不可能，等等。

83
00:06:19,110 --> 00:06:19,740
你在那里。

84
00:06:19,810 --> 00:06:27,340
但是关键是，有一种解决方案可以探索更高的维度，而这并不是

85
00:06:27,340 --> 00:06:29,160
死胡同，你可以那样做。

86
00:06:29,170 --> 00:06:34,480
但是这个算法有一个问题，就是映射到更高维度

87
00:06:34,480 --> 00:06:41,380
空间可能是高度计算密集型的，因此可能需要大量计算和大量处理能力

88
00:06:41,380 --> 00:06:50,440
而且您知道数据集越大，则可能导致的问题越多，因此这种方法

89
00:06:50,500 --> 00:06:57,130
并不是最好的，因为您可以想象自己拥有一个数据集，然后将其映射到更高的维度

90
00:06:57,130 --> 00:07:03,850
在那里进行所有计算，然后返回到较低的尺寸，甚至可以

91
00:07:03,850 --> 00:07:10,330
一台计算机，就像我们脑海中的要求一样，但是就像一台可能导致

92
00:07:10,330 --> 00:07:18,800
很多延迟会导致很多类似的处理积压和问题。

93
00:07:18,820 --> 00:07:23,710
从这个意义上讲，我们不希望这种情况发生，因此我们将探索我们正在从事的其他事情。

94
00:07:23,710 --> 00:07:32,320
我们将探索另一种被称为“数学技巧”的方法

95
00:07:32,320 --> 00:07:38,910
将帮助我们执行非常相似的操作，获得非常相似的结果。

96
00:07:38,980 --> 00:07:45,340
但是不必进入更高维度的空间，我们将在下一个讨论

97
00:07:45,340 --> 00:07:48,080
本教程将令人兴奋，我等不及要看那里了。

98
00:07:48,100 --> 00:07:49,900
在那之前开心地分析

