
freetuts.download
UpFile.info
uptobox.coms

Hostname: www.croft.com
Main IP address: 167.88.114.114
Root password: Kp0ZWG1Tes

cpzbrzyrbghmjeje
nigmucpjqtuzjejj

#moon 节点
ea70a10353

https://documenter.getpostman.com/view/6935543/SW7bzmLp?version=latest#88ba91c1-0eee-4573-b83c-2d5396d53466

#github的SSH配置如下：

#设置Git的user name和email:
git config --global user.name "croftwallace"
git config --global user.email "croft_wallace@163.com"

#取消git global 配置
git config --global --unset user.name
git config --global --unset user.email


#查看当前配置
git config --list 

###git 命令

#git常见命令地址
https://www.jianshu.com/p/f92ed1ca8120

Generating a new SSH key pair:
ssh-keygen -t rsa -C "your.email@example.com" -b 4096

在服务器添加完公钥后报错 sign_and_send_pubkey: signing failed: agent refused operation:
ssh-add

测试ssh git服务器
ssh -p 2289 git@192.168.1.123

git init //git初始化当前目录

git remote add origin https://****.git  //将本地仓库关联到远程地址 

git pull --rebase origin master //将远程仓库中文件拉取下来 与远程代码同步，同步过程会检查冲突，

git add * // 添加当前目录下所以文件 会忽略.gitignore把任何文件都加入

git add . //修复 Changes not staged for commit 会把本地所有untrack的文件都加入暂存区，并且会根据.gitignore做过滤

git add ab/  ab/  //添加当前目录 ab文件夹 远程也是 ab 文件夹

git commit -m "descript some change with you word"

git push origin master //将本地提交的 推送到远程 master分支下，远程库是空时可加 -u


git pull --rebase
git pull的默认行为是git fetch + git merge
git pull --rebase则是git fetch + git rebase.

git fetch  //从远程获取最新版本到本地，不会自动合并分支

git rebase //顾名思义，就是重新定义（re）起点（base）的作用，即重新定义分支的版本库状态。

git rebase --abort 会放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；完全撤消变基。 Git 将您恢复为分支状态如同调用 git rebase 之前一样。
git rebase --skip 则会将引起冲突的commits丢弃掉，自己对文件的commit无效，开发者自己修改的部分全部无效，（慎用！！）；
git rebase --continue 合并冲突，结合"git add 文件"命令一起用与修复冲突，提示开发者，一步一步地有没有解决冲突。



执行完git pull --rebase 之后，本地如果产生冲突，手动解决冲突之后，用"git add"命令去更新这些内容的索引(index)，然后只要执行:
git rebase --continue 就可以线性的连接本地分支与远程分支，无误之后就回退出，回到主分支上。
注意：一般情况下，修改后检查没问题，使用rebase continue来合并冲突。

您可以解决冲突。
要解决冲突，可以按照从命令行解决合并冲突的标准过程操作。 完成后，您需要调用 git rebase --continue 以便 Git 继续处理变基的其余部分。

#删除远程关联文件
git remote remove origin

#建立远程关联，也可是 ssh地址
git remote add origin http://gitserver:3000/zhoukeng/ox-v2-message.git


#把远程仓库clone到本地
git clone git@*******.git

#查询当前远程的版本
git remote -v

#本地创建新的分支
git branch [branch name]	

#切换到新的分支
git checkout [branch name] 	

#创建分支的同时切换到该分支上
git checkout -b [branch name]	

#删除本地分支
git branch -d [branch name]		

#显示所有本地及远端分支名
git branch -a

#显示每个（本地）分支当前指向的提交记录的哈希值，以及和其上游分支的相对位置
git branch -v  // -v == -verbose

#显示每个（本地）分支当前指向的提交记录的哈希值，以及和其上游分支的相对位置，同时会显示上游分支的名字
git branch -vv


#删除github远程分支
git push origin :[branch name]	// origin 后面有个空格



#删除服务器文件,本地保留
git rm --cached filename/-r directory


##从远程仓库获取最新代码合并到本地分支

#获取远端的origin/master分支
git fetch origin master

#查看本地master与远端origin/master的版本差异
git log -p master..origin/master

#合并最新代码到本地分支
git merge origin/master

#本地合并modify到当前分支，非modify
git merge modify



#tag 标签 作用
作用和commit_id 类似，自己取名比一串id好记

#查看提交版本号
git log
git reflog

#h回退到之前某个版本
git reset --hard commit_id

#打一个新标签，默认打到最新commit上
git tag <name>

#查看所有标签
git tag

#创建带有说明的标签，用-a指定标签名，-m指定说明文字 最后数字是 commit_id
git tag -a v0.1 -m "标签名说明文字" 3628164

#推送一个本地标签到远程
git push origin <tagname>

#删除本地标签
git tag -d v0.1

#删除一个远程标签，先在本地进行删除
git push origin :refs/tags/<tagname>


#撤回commit
git reset --soft HEAD^
HEAD^的意思是上一个版本，也可以写成HEAD~1
如果你进行了2次commit，想都撤回，可以使用HEAD~2

--mixed 
意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作
这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。

--soft  
不删除工作空间改动代码，撤销commit，不撤销git add . 

--hard
删除工作空间改动代码，撤销commit，撤销git add .  注意完成这个操作后，就恢复到了上一次的commit状态。





