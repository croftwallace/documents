
#快速锁屏:
win+L

https://url.cn/5GsGZdV

#查看该端口被那个PID所占用
netstat -ano|findstr "<端口号>"

#ubuntu 新建文件夹快捷键
Ctrl Shift n

读取的权限等于4，用r表示
写入的权限等于2，用w表示
执行的权限等于1，用x表示

#配置软链接
sudo ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx

#文件关联
sudo ln -n /etc/nginx/sites-available/myserver /etc/nginx/sites-enabled/myserver

#删除nginx，–purge包括配置文件
sudo apt --purge remove nginx

#罗列出与nginx相关的软件
dpkg --get-selections|grep nginx 

#Shell 类的行尾添加 \ 的命令 表示换行
docker run -it --rm \
    ubuntu:18.04 \
    bash


curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -它是单行命令，需要一起运行，除非Ansible提供了一种单独运行它们的方法。

curl ....  从指定的uri获取内容
| 获取一个命令的输出（在这种情况下为curl），然后将其运行到另一个命令的输入（以下为一个）
apt-key add - 添加包密钥


#播放器使用字幕文件时乱码:
1. 字幕文件的编码需要调整
2. 播放器的内置的使用的字体，不支持显示当前语言，需要调整


# 浅谈Windows下的CRLF(\r\n)在Linux系统下带来的问题
http://www.51cos.com/?p=1595

# smplayer 安装
sudo apt-get install mplayer
sudo apt-get install mpv
https://www.cnblogs.com/xiaolongdejia/p/10973190.html

sudo apt-add-repository ppa:rvm/smplayer
sudo apt-get update
sudo apt-get install smplayer smplayer-skins smplayer-themes


#linux 下载edk2
sudo apt install amule

#下载python编辑器
sudo apt install spyder3

#Ubuntu下无法挂载Windows的NTFS磁盘的问题
使用ntfsfix这个命令解决，在软件包ntfs-3g中，因此需要先安装此软件包：

sudo apt-get installntfs-3g

安装成功后，修复对应的ntfs分区（即错误中报出的分区名称）：

sudo ntfsfix /dev/sda2




Hbase和Hive在大数据架构中处在不同位置，
Hbase主要解决实时数据查询问题，
Hive主要解决数据处理和计算问题，一般是配合使用

Nebula Graph 新型图数据库

*****************dash 添加快速启动开始 *****************
desktop修改位置: /usr/share/applications

[Desktop Entry]

Encoding=UTF-8

Name=eclipse

Exec=/home/wallace/software/eclipse/eclipse

Icon=/home/wallace/software/eclipse/icon.xpm

Terminal=false

Type=Application

Categories=Development;
	
*****************dash 添加快速启动结束 *****************

ubuntu 系统错误报告
 /var/crash

启动shadowsockts服务:
sslocal -s 207.246.119.151 -p 25565 -k www.qcgzxw.cn -l 108-t 600 -m aes-256-cfb


#root 后面是前缀，locations会拼接在一起:/home/wallace/nginx/static/
server {
	listen 6666;
	server_name 192.168.1.236;
	access_log /home/wallace/nginx/logs/default.log;
	location /static/ {
		root /home/wallace/nginx/;
		index index.html;
		autoindex on;
	}
}

#查看该PID对应的进程名称
tasklist|findstr “<PID号>”

安装pip3
sudo apt-get install python3-pip
 
升级pip3
sudo pip3 install --upgrade pip

卸载pip3
sudo apt-get remove python3-pip

#haven't properly installed the header files and static libraries for python dev
sudo apt-get install python-dev   # for python2.x installs
sudo apt-get install python3-dev  # for python3.x installs


# distributed 1.21.8 requires msgpack, which is not installed.
First Method: Run this command
conda install -c anaconda msgpack-python
Second Method: Run this command
pip install msgpack


# python 空 list 本身等同于 False

## 安装anaconda后 永久取消base字样办法：

1、在新终端中输入：gedit ～/.bashrc
2、在打开的文件最后加上一句命令：conda deactivate
3、重新打开终端即可消除base字样。

# anaconda导航界面启动
anaconda-navigator

# 升级anaconda版本
conda update conda

#conda 中安装操作redis的模块
conda install -c anaconda redis-py

#conda install xxx模块权限不够时
anaconda文件夹改变权限，并添加-R更改所有子文件夹限

# anaconda 创建指定python3.5环境 并包含 anaconda包
conda create -n chatbot python=3.5 anaconda

# 激活环境
conda activate chatbot 或者 source activate chatbot

# 退出环境
conda deactivate

# 删除环境
conda remove -n chatbot --all
pyt
# 列出所以环境
conda info --envs 或者 conda info -e

# 卸载anaconda
删除 anaconda对应的目录即可

# conda安装包介绍
当使用 conda install 无法进行安装时，可以考虑从http://Anaconda.org中获取安装包的命令，并进行安装


$ Linux下对文件进行md5校验命令
md5sum 文件名
md5sum文件会在文件的最后增加一个'\n'，再进行md5运算。
同理，用echo "password" |md5sum生成的结果也是一样，因为echo也是在最后增加了一个"\n"。
所以使用md5sum加密字符串的时候应该避免这个问题，要echo -n "passwd"|md5sum, -n代表不输出'\n'符。

# TensorFlow版本升级
cpu：pip install --upgrade --ignore-installed tensorflow==1.*
gpu：pip install --upgrade --ignore-installed tensorflow-gpu==1.*


# Tensorflow 安装超时
pip install --index-url https://pypi.douban.com/simple tensorflow==1.15.0

pip install --index-url http://mirrors.aliyun.com/pypi/simple tensorflow==1.15.0

# pip基本介绍
pip只是包管理器，无法对环境进行管理。因此如果想在指定环境中使用pip进行安装包，则需要先切换到指定环境中，再使用pip命令安装包。
pip无法更新python，因为pip并不将python视为包。
pip可以安装一些conda无法安装的包；conda也可以安装一些pip无法安装的包。因此当使用一种命令无法安装包时，可以尝试用另一种命令

# 增加spyder模块代码提示功能
找到/home/wallace/anaconda3/envs/tensorflow/lib/python3.5/site-packages/spyder/utils/introspection打开module_completion.py拉到最后，然后看到mods，输入想要提示的模块


# python 单双引号
当你用单引号' '定义字符串的时候，它就会认为你字符串里面的双引号" "是普通字符，从而不需要转义。反之当你用双引号定义字符串的时候，就会认为你字符串里面的单引号是普通字符无需转义

# python字符串替换 r代表了原字符串,不需要转义
re.compile('item\\n')
re.compile(r'item\n')


# python中的类型
https://www.jianshu.com/p/bc57ad6f35c4
 整型 int
· 浮点型 float
· 字符串型 str
· 列表list
· 元组tuple
· 字典dict
· 集合set

# python 字典转换
import json
JSON到字典转化：
ret_dict = json.loads(json_str)
字典到JSON转化：
json_str = json.dumps(dict)

# python sorted set 添加数据
mkey = 'qxy:msgRecord:S0000003:13551472168:2019-10-25'      
data = {"chatType": 2, "createTime": 1571996333208, "msgType": 0, "extras": {"toPlate": "S0000003"}, "group_id": "", "cmd": 11, "to": "13551472168", "from": "S0000003", "content": "在的"}
rds.zadd(mkey, {json.dumps(data, ensure_ascii = False):2})


# NodeSelector 没有找到  py2neo的版本问题
pip install git+https://github.com/nigelsmall/py2neo.git#egg=py2neo


# python（spyder）的快捷键
选中多行后：　
Ctrl + 1: 注释/反注释
Ctrl + 4: 块注释


# Neo4j支持三种网络协议（Protocol）
Bolt: 7687
HTTP: 7474
HTTPS: 7473

# neo4j 较适合场景
优点: 快速解决复杂的关系问题
社交网络
交通大数据（物流）
推荐系统
欺诈分析
Web 安全（垃圾邮件等等）

# neo4j 不适合的领域。

记录大量基于事件的数据
需要大规模分布式数据处理
二进制数据存储
适合保存在关系型数据的结构化数据


# 商品推荐数据建模，简单示例
customer只有customerid, name
order顶点只要orderid， ordertime
product顶点只有productid， name。
ordered/contains边暂时不需要额外属性字段，

sudo dpkg-reconfigure wireshark-common

sudo usermod -a -G wireshark $USER

查看所以用户组:
cat /etc/group

创建用户组:
sudo groupadd docker

将当前用户加到组中:
sudo usermod -aG docker $USER

linux下添加，删除，修改，查看用户和用户组
http://blog.51yip.com/linux/1137.html

ssh 说明
https://www.bookstack.cn/read/linux-command/command-ssh-add.md


#docker 安装运行 neo4j

docker pull neo4j

docker run \
    --publish=7474:7474 --publish=7687:7687 \
    --volume=$HOME/neo4j/data:/data \
    neo4j

# 终端连接neo4j
neo4j-client -u neo4j localhost 7687

# neo4j 修改密码
进入neo4j提供的可视化界面
输入： :server change-password

# python 安装 neo4j 的库
pip install py2neo


# Border Gateway Protocol: bgp 边界网关协议 一种距离向量路由协议
# Address Resolution Protocol: arp 地址解析协议

#windows 后台运行jar
javaw -jar xxx.jar

#linux 后台运行jar
java -jar xxx.jar & 

#notepad 操作多行，alt+拖动 选中多行，同时操作


# JOE 文体编辑器JOE 是GPL下发布的一个轻量级的基于终端的文本编辑器。JOE 是一款少有的支持大文件的文本编辑器,可以打开和编辑比物理内存大的文件
sudo apt-get install joe
https://zhuanlan.zhihu.com/p/48787309


maven 发布jar到仓库:

mvn deploy:deploy-file -DgroupId="com.qixiang.ox" -DartifactId=ox-im-contract -Dversion="1.0.0" -Dpackaging=jar  -Dfile=D:\softspace\java\projects\j-im\ox-im-contract\target\ox-im-contract-1.0.0-SNAPSHOT.jar -Durl=http://192.168.1.232:3001/repository/qixiang_ox -DrepositoryId=qixiangmaven


maven 本地jar打入本地仓库:

mvn install:install-file -Dfile=C:\Users\Administrator\Desktop\ox-commons-1.0-SNAPSHOT.jar -DgroupId="com.qixiang.ox" -DartifactId=ox-commons -Dversion="1.0" -Dpackaging=jar


ffmpeg -i Game.Of.Thrones.S03E05.Kissed.By.Fire.1080p.BluRay.DTS-HD.MA.5.1.x264-PublicHD.mkv -c copy -c:v libx264 -vf scale=-2:720 Game.Of.Thrones.S03E05.Kissed.By.Fire.720p.mkv


ffmpeg -i input.mp4 -i logo.jpg -filter_complex overlay output_1.mp4

ffmpeg -i input.mp4 -ss 00:00:2 -t 10 -r 1 -q:v 2 -f image2 pic-%03d.jpeg

ffmpeg -y -i test.mp4 -ac "1" -ar "16000" -loglevel "error" test.wav


VP9: 开源视频压缩格式


# 列出已经安装的snap包
sudo snap list

# 搜索要安装的snap包
sudo snap find <text to search>

# 安装一个snap包
sudo snap install <snap name>

# 更新一个snap包，如果你后面不加包的名字的话那就是更新所有的snap包
sudo snap refresh <snap name>

# 把一个包还原到以前安装的版本
sudo snap revert <snap name>

# 删除一个snap包
sudo snap remove <snap name>

# 查询最近做的操作
snap changes

# 关于snap更多信息，查看man手册：
man snap


***************************************Redis 相关***************************************

没有对应的key 返回null
key-value 为 String:String 类型，空值无法为 null 对象


#redis的文件存放目录
config get dir

备份: save  


dump.rdb 数据导入时，前提需要关闭redis 服务

#关闭redis进程
pkill -9 redis 

# 按配置文件启动redis
sudo redis-server /etc/redis/6380.conf


#redis有两种持久化方式，Rdb 和 Aof





***************************************docker***************************************
Azure 中国镜像 https://dockerhub.azk8s.cn

/etc/docker/daemon.json
{
  "registry-mirrors": [
    "https://dockerhub.azk8s.cn",
    "https://reg-mirror.qiniu.com"
  ]
}

拉取镜像地址替换方式:
# docker pull gcr.io/google_containers/hyperkube-amd64:v1.9.2

docker pull gcr.azk8s.cn/google_containers/hyperkube-amd64:v1.9.2

#以镜像为基础启动docker容器
docker run -dit --rm \
    ubuntu:18.04 \
    bash

-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。
--rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间

-d 参数运行容器，容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面

#命令窗口进入容器
docker exec -it webserver bash  //webserver 可以换成 container ID

#挂载一个主机目录作为数据卷,也可以指定文件,默认权限 rw,可单独指定
docker run -d -P \
    --name web \
    --mount type=bind,source=/src/webapp,target=/opt/webapp,readonly \
    #--mount type=bind,source=$HOME/.bash_history,target=/root/.bash_history \
    training/webapp \
    python app.py

#使用 hostPort:containerPort 格式本地的 5000 端口映射到容器的 5000 端口
docker run -d -p 5000:5000 training/webapp python app.py

#使用 ip:hostPort:containerPort 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1
docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py

#可以使用 udp 标记来指定 udp 端口
docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py

#查看当前映射的端口配置，也可以查看到绑定的地址
docker port nostalgic_morse 5000

# -p 标记可以多次使用来绑定多个端口
docker run -d \
    -p 5000:5000 \
    -p 3000:80 \
    training/webapp \
    python app.py


#登录Docker Hub
docker login

#docker 搜索镜像
docker search ubuntu

#推送镜像到Docker Hub, username 请替换为你的 Docker 账号用户名
docker tag ubuntu:18.04 username/ubuntu:18.04 //给镜像打标签

docker push username/ubuntu:18.04 //推送镜像到Docker Hub仓库

docker search username //查看自己仓库的镜像

#拉取镜像
docker pull ubuntu

#列出部分镜像
docker image ls ubuntu
***************************************docker***************************************



# 嵌入式数据库和数据库服务器的区别
嵌入式数据库不需要数据库驱动程序，直接将数据库的库文件链接到应用程序中
数据库服务器的架构 通常通过数据库驱动程序如JDBC、ODBC等访问数据库服务器，数据库服务器再操作数据库文件





